// Generated by Haxe 4.0.0-preview.4+1e3e5e016
(function ($global) { "use strict";
var $hxEnums = {},$_;
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
var TodoApp = function() { };
TodoApp.__name__ = true;
TodoApp.main = function() {
	var store = new todo_model_Store({ todos : new scout_Collection()});
	var app = new todo_view_App({ sel : "#Root", title : "Todo", store : store});
	app.render();
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,__class__: haxe_ds_ObjectMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if((o instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g11 = 0;
			var _g3 = l;
			while(_g11 < _g3) {
				var i1 = _g11++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if((o instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if((o instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return $hxEnums[o.__enum__] == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var scout_Renderable = function() { };
scout_Renderable.__name__ = true;
scout_Renderable.prototype = {
	__class__: scout_Renderable
};
var scout_Child = function() { };
scout_Child.__name__ = true;
scout_Child.__interfaces__ = [scout_Renderable];
scout_Child.prototype = {
	__class__: scout_Child
};
var scout_ChildrenImpl = function(children) {
	this.children = [];
	if(children != null) {
		this.children = children;
	}
};
scout_ChildrenImpl.__name__ = true;
scout_ChildrenImpl.__interfaces__ = [scout_Child,scout_Renderable];
scout_ChildrenImpl.prototype = {
	get_length: function() {
		return this.children.length;
	}
	,setParent: function(parent) {
		this.parent = parent;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var view = _g1[_g];
			++_g;
			view.setParent(this.parent);
		}
	}
	,detachFromParent: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var view = _g1[_g];
			++_g;
			view.detachFromParent();
		}
	}
	,add: function(view) {
		view.setParent(this.parent);
		this.children.push(view);
		if((this.parent instanceof scout_View)) {
			var view1 = this.parent;
			view1.render();
		}
	}
	,prepend: function(view) {
		view.setParent(this.parent);
		this.children.unshift(view);
		if((this.parent instanceof scout_View)) {
			var view1 = this.parent;
			view1.render();
		}
	}
	,remove: function(view) {
		var child = Lambda.find(this.children,function(c) {
			return c == view;
		});
		if(child != null) {
			child.detachFromParent();
			if((child instanceof scout_View)) {
				var view1 = child;
				view1.remove();
			}
			HxOverrides.remove(this.children,child);
			if((this.parent instanceof scout_View)) {
				var view2 = this.parent;
				view2.render();
			}
		}
	}
	,getAt: function(index) {
		return this.children[index];
	}
	,has: function(view) {
		return Lambda.has(this.children,view);
	}
	,find: function(cb) {
		return Lambda.find(this.children,cb);
	}
	,map: function(cb) {
		return this.children.map(cb);
	}
	,iterator: function() {
		return HxOverrides.iter(this.children);
	}
	,toRenderResult: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("" + this.children.map(function(r) {
			return r.toRenderResult();
		}).join(""));
	}
	,__class__: scout_ChildrenImpl
};
var scout__$Children_Children_$Impl_$ = {};
scout__$Children_Children_$Impl_$.__name__ = true;
scout__$Children_Children_$Impl_$._new = function(children) {
	var this1 = new scout_ChildrenImpl(children);
	return this1;
};
scout__$Children_Children_$Impl_$.ofArray = function(children) {
	var this1 = new scout_ChildrenImpl(children);
	return this1;
};
var scout_Observable = function() { };
scout_Observable.__name__ = true;
scout_Observable.prototype = {
	__class__: scout_Observable
};
var scout_Collection = function(init) {
	this.modelListeners = new haxe_ds_ObjectMap();
	this.onChange = new scout_Signal();
	this.onRemove = new scout_Signal();
	this.onAdd = new scout_Signal();
	this.models = [];
	if(init != null) {
		var _g = 0;
		while(_g < init.length) {
			var model = init[_g];
			++_g;
			this.registerModel(model);
		}
	}
};
scout_Collection.__name__ = true;
scout_Collection.__interfaces__ = [scout_Observable];
scout_Collection.prototype = {
	get_length: function() {
		return this.models.length;
	}
	,observe: function(cb) {
		return this.onChange.add(cb);
	}
	,add: function(model) {
		if(!Lambda.has(this.models,model)) {
			this.registerModel(model);
			this.onAdd.dispatch(model);
			this.onChange.dispatch(model);
		}
		return this;
	}
	,registerModel: function(model) {
		var _gthis = this;
		this.models.push(model);
		var listener = model.observe(function(_) {
			_gthis.onChange.dispatch(model);
			return;
		});
		this.modelListeners.set(model,listener);
	}
	,indexOf: function(model) {
		return this.models.indexOf(model);
	}
	,filter: function(f) {
		return this.models.filter(f);
	}
	,exists: function(model) {
		return Lambda.has(this.models,model);
	}
	,idExists: function(id) {
		return Lambda.exists(this.models,function(m) {
			return m.get_id() == id;
		});
	}
	,has: function(elt) {
		return Lambda.exists(this.models,elt);
	}
	,find: function(elt) {
		return Lambda.find(this.models,elt);
	}
	,get: function(id) {
		return Lambda.find(this.models,function(m) {
			return m.get_id() == id;
		});
	}
	,getAt: function(index) {
		return this.models[index];
	}
	,each: function(cb) {
		Lambda.foreach(this.models,cb);
		return this;
	}
	,map: function(cb) {
		return this.models.map(cb);
	}
	,iterator: function() {
		return HxOverrides.iter(this.models);
	}
	,remove: function(model) {
		if(this.modelListeners.h.__keys__[model.__id__] != null) {
			var _this = this.modelListeners.h[model.__id__];
			_this.signal.remove(_this.listener);
			this.modelListeners.remove(model);
		}
		if(Lambda.exists(this.models,function(m) {
			return m.get_id() == model.get_id();
		})) {
			this.models = this.models.filter(function(m1) {
				return m1.get_id() != model.get_id();
			});
			this.onRemove.dispatch(model);
			this.onChange.dispatch(model);
		}
		return this;
	}
	,removeById: function(id) {
		var id1 = id;
		var model = Lambda.find(this.models,function(m) {
			return m.get_id() == id1;
		});
		if(model != null) {
			this.remove(model);
		}
		return this;
	}
	,__class__: scout_Collection
};
var scout_Dom = function() { };
scout_Dom.__name__ = true;
scout_Dom.delegate = function(el,selector,type,cb,useCapture) {
	var listener = function(e) {
		var del = scout_Dom.closest(e.target,selector);
		if(del != null) {
			cb(e);
		}
	};
	if(selector == null) {
		listener = cb;
	}
	el.addEventListener(type,listener,useCapture);
	return { destroy : function() {
		el.removeEventListener(type,listener,useCapture);
	}};
};
scout_Dom.select = function(sel) {
	return window.document.querySelector(sel);
};
scout_Dom.selectAll = function(sel) {
	return window.document.querySelectorAll(sel);
};
scout_Dom.closest = function(el,selector) {
	while(el != null && el.nodeType != scout_Dom.docNodeType) {
		if(el.matches(selector)) {
			return el;
		}
		el = el.parentNode;
	}
	if(el == null || el.nodeType == scout_Dom.docNodeType) {
		return null;
	}
	return el;
};
scout_Dom.html = function(el,html) {
	el.innerHTML = html;
	return el;
};
var scout_EfficientChildrenImpl = function(children) {
	scout_ChildrenImpl.call(this,children);
};
scout_EfficientChildrenImpl.__name__ = true;
scout_EfficientChildrenImpl.__super__ = scout_ChildrenImpl;
scout_EfficientChildrenImpl.prototype = $extend(scout_ChildrenImpl.prototype,{
	add: function(view) {
		view.setParent(this.parent);
		if(this.children.length > 0) {
			var last = this.children[this.children.length - 1];
			this.children.push(view);
			if((last instanceof scout_View) && (view instanceof scout_View)) {
				var lastView = last;
				var newView = view;
				if(!lastView.el.parentElement.contains(newView.el)) {
					lastView.el.parentElement.appendChild(newView.render().el);
				} else {
					newView.render();
				}
				return;
			}
		}
		this.children.push(view);
		if((this.parent instanceof scout_View)) {
			var view1 = this.parent;
			view1.render();
		}
	}
	,prepend: function(view) {
		view.setParent(this.parent);
		if(this.children.length > 0) {
			var first = this.children[0];
			this.children.unshift(view);
			if((first instanceof scout_View) && (view instanceof scout_View)) {
				var firstView = first;
				var newView = view;
				if(!firstView.el.parentElement.contains(newView.el)) {
					firstView.el.parentElement.insertBefore(newView.render().el,firstView.el);
				} else {
					newView.render();
				}
				return;
			}
		}
		this.children.unshift(view);
		if((this.parent instanceof scout_View)) {
			var view1 = this.parent;
			view1.render();
		}
	}
	,remove: function(view) {
		var child = Lambda.find(this.children,function(c) {
			return c == view;
		});
		if(child != null) {
			child.detachFromParent();
			if((child instanceof scout_View)) {
				var view1 = child;
				view1.remove();
				HxOverrides.remove(this.children,child);
				return;
			}
			HxOverrides.remove(this.children,child);
			if((this.parent instanceof scout_View)) {
				var view2 = this.parent;
				view2.render();
			}
		}
	}
	,__class__: scout_EfficientChildrenImpl
});
var scout__$EfficientChildren_EfficientChildren_$Impl_$ = {};
scout__$EfficientChildren_EfficientChildren_$Impl_$.__name__ = true;
scout__$EfficientChildren_EfficientChildren_$Impl_$._new = function(children) {
	var this1 = new scout_EfficientChildrenImpl(children);
	return this1;
};
scout__$EfficientChildren_EfficientChildren_$Impl_$.ofArray = function(children) {
	var this1 = new scout_EfficientChildrenImpl(children);
	return this1;
};
var scout_Model = function() { };
scout_Model.__name__ = true;
scout_Model.__interfaces__ = [scout_Observable];
scout_Model.prototype = {
	__class__: scout_Model
};
var scout__$RenderResult_RenderResult_$Impl_$ = {};
scout__$RenderResult_RenderResult_$Impl_$.__name__ = true;
scout__$RenderResult_RenderResult_$Impl_$._new = function(str) {
	var this1 = str;
	return this1;
};
scout__$RenderResult_RenderResult_$Impl_$.ofRenderable = function(renderable) {
	return renderable.toRenderResult();
};
var scout_SignalSlot = function(listener,signal,once) {
	if(once == null) {
		once = false;
	}
	this.listener = listener;
	this.signal = signal;
	this.once = once;
};
scout_SignalSlot.__name__ = true;
scout_SignalSlot.prototype = {
	remove: function() {
		this.signal.remove(this.listener);
	}
	,__class__: scout_SignalSlot
};
var scout_Signal = function() {
	this.slots = [];
};
scout_Signal.__name__ = true;
scout_Signal.__interfaces__ = [scout_Observable];
scout_Signal.prototype = {
	add: function(listener,once) {
		if(once == null) {
			once = false;
		}
		var slot = new scout_SignalSlot(listener,this,once);
		this.slots.push(slot);
		return slot;
	}
	,observe: function(listener) {
		return this.add(listener,false);
	}
	,once: function(listener) {
		return this.add(listener,true);
	}
	,remove: function(listener) {
		this.slots = this.slots.filter(function(slot) {
			return slot.listener != listener;
		});
	}
	,dispatch: function(payload) {
		var _g = 0;
		var _g1 = this.slots;
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			slot.listener(payload);
			if(slot.once) {
				slot.signal.remove(slot.listener);
			}
		}
	}
	,__class__: scout_Signal
};
var scout_StateObject = function() { };
scout_StateObject.__name__ = true;
scout_StateObject.__interfaces__ = [scout_Observable];
scout_StateObject.prototype = {
	__class__: scout_StateObject
};
var scout__$State_State_$Impl_$ = {};
scout__$State_State_$Impl_$.__name__ = true;
scout__$State_State_$Impl_$.ofObservable = function(value) {
	return new scout__$State_StateOfObservable(value);
};
scout__$State_State_$Impl_$.ofDynamic = function(value) {
	return scout__$State_State_$Impl_$._new(value);
};
scout__$State_State_$Impl_$.ofChild = function(parent,child) {
	return new scout__$State_StateOfChild(parent,child);
};
scout__$State_State_$Impl_$._new = function(value) {
	var this1 = new scout__$State_SimpleState(value);
	return this1;
};
var scout__$State_SimpleState = function(value) {
	this.signal = new scout_Signal();
	this.value = value;
};
scout__$State_SimpleState.__name__ = true;
scout__$State_SimpleState.__interfaces__ = [scout_StateObject];
scout__$State_SimpleState.prototype = {
	set: function(value) {
		if(this.value == value) {
			return;
		}
		this.value = value;
		this.signal.dispatch(this.value);
	}
	,get: function() {
		return this.value;
	}
	,observe: function(cb) {
		return this.signal.add(cb);
	}
	,__class__: scout__$State_SimpleState
};
var scout__$State_StateOfObservable = function(value) {
	this.signal = new scout_Signal();
	var _gthis = this;
	if(value != null) {
		this.value = value;
		this.lastSlot = value.observe(function(_) {
			_gthis.signal.dispatch(value);
			return;
		});
	}
};
scout__$State_StateOfObservable.__name__ = true;
scout__$State_StateOfObservable.__interfaces__ = [scout_StateObject];
scout__$State_StateOfObservable.prototype = {
	set: function(value) {
		var _gthis = this;
		if(this.value == value) {
			return;
		}
		this.value = value;
		if(this.lastSlot != null) {
			var _this = this.lastSlot;
			_this.signal.remove(_this.listener);
		}
		if(value != null) {
			this.lastSlot = value.observe(function(_) {
				_gthis.signal.dispatch(value);
				return;
			});
		}
		this.signal.dispatch(value);
	}
	,get: function() {
		return this.value;
	}
	,observe: function(cb) {
		return this.signal.add(cb);
	}
	,__class__: scout__$State_StateOfObservable
};
var scout__$State_StateOfChild = function(parent,target) {
	this.signal = new scout_Signal();
	this.parent = parent;
	if(target != null) {
		this.target = target;
		target.setParent(this.parent);
	}
};
scout__$State_StateOfChild.__name__ = true;
scout__$State_StateOfChild.__interfaces__ = [scout_StateObject];
scout__$State_StateOfChild.prototype = {
	set: function(target) {
		if(this.target == target) {
			return;
		}
		if(this.target != null) {
			this.target.detachFromParent();
		}
		this.target = target;
		this.target.setParent(this.parent);
		this.signal.dispatch(this.target);
	}
	,get: function() {
		return this.target;
	}
	,observe: function(cb) {
		return this.signal.add(cb);
	}
	,__class__: scout__$State_StateOfChild
};
var scout__$Template_SafeContent = function(content) {
	this.content = content;
};
scout__$Template_SafeContent.__name__ = true;
scout__$Template_SafeContent.__interfaces__ = [scout_Renderable];
scout__$Template_SafeContent.prototype = {
	toRenderResult: function() {
		return this.content;
	}
	,__class__: scout__$Template_SafeContent
};
var scout_Template = function() { };
scout_Template.__name__ = true;
scout_Template.safe = function(str) {
	return new scout__$Template_SafeContent(str);
};
var scout_View = function() {
	this.delegatedEvents = [];
	this.events = [];
	this.parentListeners = [];
	this.onRemove = new scout_Signal();
	this.onReady = new scout_Signal();
	this.afterRender = new scout_Signal();
	this.beforeRender = new scout_Signal();
	this.cid = "__scout_view_" + scout_View.__scout_ids++;
};
scout_View.__name__ = true;
scout_View.__interfaces__ = [scout_Child,scout_Renderable];
scout_View.prototype = {
	set_el: function(el) {
		if(this.delegatedEvents.length > 0) {
			this.undelegateEvents();
		}
		this.el = el;
		if(this.events.length > 0) {
			this.delegateEvents(this.events);
		}
		return el;
	}
	,get_content: function() {
		return this.el.outerHTML;
	}
	,set_content: function(content) {
		return this.el.innerHTML = content;
	}
	,__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("");
	}
	,__scout_doRender: function() {
		this.set_content(this.__scout_render());
	}
	,shouldRender: function() {
		return true;
	}
	,render: function() {
		if(this.shouldRender()) {
			this.beforeRender.dispatch(this);
			this.__scout_doRender();
			this.afterRender.dispatch(this);
		}
		return this;
	}
	,setParent: function(parent) {
		var _gthis = this;
		this.detachFromParent();
		this.parent = parent;
		if((this.parent instanceof scout_View)) {
			var view = this.parent;
			this.parentListeners = [view.onRemove.add(function(_) {
				_gthis.remove();
			}),view.beforeRender.add(function(_1) {
				_gthis.detach();
			}),view.afterRender.add(function(_2) {
				_gthis.attach();
			})];
		}
	}
	,detachFromParent: function() {
		var _g = 0;
		var _g1 = this.parentListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener.signal.remove(listener.listener);
		}
		this.parentListeners = [];
		this.detach();
		this.parent = null;
	}
	,toRenderResult: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("<div id=\"" + StringTools.htmlEscape(Std.string(this.cid)) + "\"></div>");
	}
	,detach: function() {
		if(this.el.parentElement != null) {
			this.el.parentElement.removeChild(this.el);
		}
	}
	,attach: function() {
		if(this.parent == null) {
			return;
		}
		if((this.parent instanceof scout_View)) {
			var view = this.parent;
			var target = view.el.querySelector("#" + this.cid);
			if(target != null) {
				target.parentNode.replaceChild(this.render().el,target);
			}
		}
	}
	,remove: function() {
		this.onRemove.dispatch(this);
		this.undelegateEvents();
		this.el.remove();
	}
	,delegateEvents: function(events) {
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			var e = scout_Dom.delegate(this.el,event.selector,event.action,event.method);
			this.delegatedEvents.push(e);
		}
	}
	,undelegateEvents: function() {
		var _g = 0;
		var _g1 = this.delegatedEvents;
		while(_g < _g1.length) {
			var binding = _g1[_g];
			++_g;
			binding.destroy();
		}
		this.delegatedEvents = [];
	}
	,__class__: scout_View
};
var todo_model_VisibleTodos = $hxEnums["todo.model.VisibleTodos"] = { __ename__ : true, __constructs__ : ["VisibleAll","VisibleCompleted","VisiblePending"]
	,VisibleAll: {_hx_index:0,__enum__:"todo.model.VisibleTodos"}
	,VisibleCompleted: {_hx_index:1,__enum__:"todo.model.VisibleTodos"}
	,VisiblePending: {_hx_index:2,__enum__:"todo.model.VisibleTodos"}
};
var todo_model_Store = function(props) {
	this.__scout_silent = false;
	this.onChange = new scout_Signal();
	this.props = { };
	this.props.todos = scout__$State_State_$Impl_$.ofObservable(props.todos);
	this.props.editing = scout__$State_State_$Impl_$.ofObservable(props.editing);
	var tmp = props.visible != null ? scout__$State_State_$Impl_$.ofDynamic(props.visible) : scout__$State_State_$Impl_$.ofDynamic(todo_model_VisibleTodos.VisibleAll);
	this.props.visible = tmp;
	this.props.todosRemaining = scout__$State_State_$Impl_$.ofDynamic(props.todosRemaining);
	var tmp1;
	if(props.id != null) {
		tmp1 = scout__$State_State_$Impl_$.ofDynamic(props.id);
	} else {
		var tmp2 = todo_model_Store;
		tmp1 = scout__$State_State_$Impl_$.ofDynamic(tmp2.__scout_ids += 1);
	}
	this.props.id = tmp1;
	this.__scout_init();
};
todo_model_Store.__name__ = true;
todo_model_Store.__interfaces__ = [scout_Model];
todo_model_Store.prototype = {
	get_todos: function() {
		return this.props.todos.get();
	}
	,set_todos: function(value) {
		this.props.todos.set(value);
		return value;
	}
	,get_editing: function() {
		return this.props.editing.get();
	}
	,set_editing: function(value) {
		this.props.editing.set(value);
		return value;
	}
	,get_visible: function() {
		return this.props.visible.get();
	}
	,set_visible: function(value) {
		this.props.visible.set(value);
		return value;
	}
	,get_todosRemaining: function() {
		return this.props.todosRemaining.get();
	}
	,__scout_init_todosRemaining: function() {
		this.props.todosRemaining.set(this.get_todos().models.filter(function(todo1) {
			return !todo1.get_completed();
		}).length);
	}
	,get_id: function() {
		return this.props.id.get();
	}
	,set_id: function(value) {
		this.props.id.set(value);
		return value;
	}
	,__scout_init: function() {
		var _gthis = this;
		this.props.todos.observe(function(_) {
			if(!_gthis.__scout_silent) {
				_gthis.onChange.dispatch(_gthis);
			}
		});
		this.props.editing.observe(function(_1) {
			if(!_gthis.__scout_silent) {
				_gthis.onChange.dispatch(_gthis);
			}
		});
		this.props.visible.observe(function(_2) {
			if(!_gthis.__scout_silent) {
				_gthis.onChange.dispatch(_gthis);
			}
		});
		this.props.todosRemaining.observe(function(_3) {
			if(!_gthis.__scout_silent) {
				_gthis.onChange.dispatch(_gthis);
			}
		});
		this.__scout_init_todosRemaining();
		this.props.todos.observe(function(_4) {
			_gthis.__scout_init_todosRemaining();
			return;
		});
		this.props.id.observe(function(_5) {
			if(!_gthis.__scout_silent) {
				_gthis.onChange.dispatch(_gthis);
			}
		});
	}
	,observe: function(listener) {
		return this.onChange.add(listener);
	}
	,__class__: todo_model_Store
};
var todo_model_Todo = function(props) {
	this.__scout_silent = false;
	this.onChange = new scout_Signal();
	this.props = { };
	this.props.label = scout__$State_State_$Impl_$.ofDynamic(props.label);
	var tmp = props.completed != null ? scout__$State_State_$Impl_$.ofDynamic(props.completed) : scout__$State_State_$Impl_$.ofDynamic(false);
	this.props.completed = tmp;
	var tmp1 = props.editing != null ? scout__$State_State_$Impl_$.ofDynamic(props.editing) : scout__$State_State_$Impl_$.ofDynamic(false);
	this.props.editing = tmp1;
	var tmp2;
	if(props.id != null) {
		tmp2 = scout__$State_State_$Impl_$.ofDynamic(props.id);
	} else {
		var tmp3 = todo_model_Todo;
		tmp2 = scout__$State_State_$Impl_$.ofDynamic(tmp3.__scout_ids += 1);
	}
	this.props.id = tmp2;
	this.__scout_init();
};
todo_model_Todo.__name__ = true;
todo_model_Todo.__interfaces__ = [scout_Model];
todo_model_Todo.prototype = {
	get_label: function() {
		return this.props.label.get();
	}
	,set_label: function(value) {
		this.props.label.set(value);
		return value;
	}
	,get_completed: function() {
		return this.props.completed.get();
	}
	,set_completed: function(value) {
		this.props.completed.set(value);
		return value;
	}
	,get_editing: function() {
		return this.props.editing.get();
	}
	,set_editing: function(value) {
		this.props.editing.set(value);
		return value;
	}
	,get_id: function() {
		return this.props.id.get();
	}
	,set_id: function(value) {
		this.props.id.set(value);
		return value;
	}
	,__scout_init: function() {
		var _gthis = this;
		this.props.label.observe(function(_) {
			if(!_gthis.__scout_silent) {
				_gthis.onChange.dispatch(_gthis);
			}
		});
		this.props.completed.observe(function(_1) {
			if(!_gthis.__scout_silent) {
				_gthis.onChange.dispatch(_gthis);
			}
		});
		this.props.editing.observe(function(_2) {
			if(!_gthis.__scout_silent) {
				_gthis.onChange.dispatch(_gthis);
			}
		});
		this.props.id.observe(function(_3) {
			if(!_gthis.__scout_silent) {
				_gthis.onChange.dispatch(_gthis);
			}
		});
	}
	,observe: function(listener) {
		return this.onChange.add(listener);
	}
	,__class__: todo_model_Todo
};
var todo_view_App = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.attrs.title = attrs.title;
	this.attrs.store = attrs.store;
	this.attrs.id = attrs.id != null ? attrs.id : "App";
	this.attrs.sel = attrs.sel;
	this.__scout_ensureEl();
	var __c = attrs.header == null ? new todo_view_Header({ title : this.get_title(), store : this.get_store()}) : attrs.header;
	__c.setParent(this);
	this.attrs.header = __c;
	var __c1 = attrs.list == null ? new todo_view_TodoList({ store : this.get_store()}) : attrs.list;
	__c1.setParent(this);
	this.attrs.list = __c1;
	this.__scout_init();
	this.delegateEvents(this.events);
};
todo_view_App.__name__ = true;
todo_view_App.__super__ = scout_View;
todo_view_App.prototype = $extend(scout_View.prototype,{
	__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("\r\n    <div class=\"todoapp\">\r\n      " + this.get_header().toRenderResult() + "\r\n      " + this.get_list().toRenderResult() + "\r\n    </div>\r\n    <footer class=\"info\">\r\n      <p>Double-click to edit a todo.</p>\r\n      <p>Written by <a href=\"https://github.com/wartman\">wartman</a></p>\r\n      <p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\r\n    </footer>\r\n  ");
	}
	,__scout_ensureEl: function() {
		if(this.get_sel() != null) {
			this.set_el(window.document.querySelector(this.get_sel()));
		}
		if(this.el == null) {
			this.set_el(window.document.createElement("div"));
			this.el.setAttribute("id",this.get_id());
		}
	}
	,get_title: function() {
		return this.attrs.title;
	}
	,get_store: function() {
		return this.attrs.store;
	}
	,get_id: function() {
		return this.attrs.id;
	}
	,get_header: function() {
		return this.attrs.header;
	}
	,get_list: function() {
		return this.attrs.list;
	}
	,get_sel: function() {
		return this.attrs.sel;
	}
	,__scout_init: function() {
	}
	,__class__: todo_view_App
});
var todo_view_Header = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.attrs.title = attrs.title;
	this.attrs.store = attrs.store;
	this.__scout_ensureEl();
	this.__scout_init();
	this.events.push({ selector : ".new-todo", action : "keydown", method : $bind(this,this.handleSubmit)});
	this.delegateEvents(this.events);
};
todo_view_Header.__name__ = true;
todo_view_Header.__super__ = scout_View;
todo_view_Header.prototype = $extend(scout_View.prototype,{
	handleSubmit: function(e) {
		if((js_Boot.__cast(e , KeyboardEvent)).key == "Enter") {
			e.preventDefault();
			var target = e.target;
			this.get_store().get_todos().add(new todo_model_Todo({ label : target.value}));
			target.value = "";
		}
	}
	,__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("\r\n    <h1>" + StringTools.htmlEscape(Std.string(this.get_title())) + "</h1>\r\n    <input class=\"new-todo\" placeholder=\"What needs doing?\" />\r\n  ");
	}
	,__scout_ensureEl: function() {
		if(this.el == null) {
			this.set_el(window.document.createElement("header"));
			this.el.setAttribute("class","header");
		}
	}
	,get_title: function() {
		return this.attrs.title;
	}
	,get_store: function() {
		return this.attrs.store;
	}
	,__scout_init: function() {
	}
	,__class__: todo_view_Header
});
var todo_view_TodoItem = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.attrs.id = attrs.id;
	this.attrs.todo = attrs.todo;
	this.attrs.store = attrs.store;
	this.attrs.sel = attrs.sel;
	this.__scout_ensureEl();
	this.__scout_init();
	this.events.push({ selector : ".edit", action : "keydown", method : $bind(this,this.doneEditing)});
	this.events.push({ selector : ".edit", action : "blur", method : $bind(this,this.bluredEdit)});
	this.events.push({ selector : null, action : "dblclick", method : $bind(this,this.edit)});
	this.events.push({ selector : ".toggle", action : "change", method : $bind(this,this.toggleCompleted)});
	this.events.push({ selector : ".destroy", action : "click", method : $bind(this,this.removeTodo)});
	this.delegateEvents(this.events);
};
todo_view_TodoItem.__name__ = true;
todo_view_TodoItem.__super__ = scout_View;
todo_view_TodoItem.prototype = $extend(scout_View.prototype,{
	initializeVisibility: function() {
		this.isVisible(this.get_store().get_visible());
	}
	,doneEditing: function(e) {
		if((js_Boot.__cast(e , KeyboardEvent)).key == "Enter") {
			e.preventDefault();
			this.update();
		}
	}
	,bluredEdit: function(e) {
		this.update();
	}
	,update: function() {
		var edit = this.el.querySelector(".edit");
		this.get_todo().set_label(edit.value);
		this.get_todo().set_editing(false);
		this.render();
	}
	,edit: function(e) {
		this.get_todo().set_editing(true);
	}
	,toggleCompleted: function(e) {
		e.stopPropagation();
		this.get_todo().set_completed(!this.get_todo().get_completed());
		if(this.get_todo().get_completed()) {
			this.el.classList.add("completed");
		} else {
			this.el.classList.remove("completed");
		}
	}
	,removeTodo: function(e) {
		e.preventDefault();
		this.get_store().get_todos().remove(this.get_todo());
	}
	,toggleEditMode: function(_) {
		if(this.get_todo().get_editing()) {
			this.el.classList.add("editing");
			this.el.querySelector(".edit").focus();
		} else {
			this.el.classList.remove("editing");
		}
	}
	,isVisible: function(_) {
		var _g = this.get_store().get_visible();
		switch(_g._hx_index) {
		case 0:
			this.show();
			break;
		case 1:
			if(this.get_todo().get_completed()) {
				this.show();
			} else {
				this.hide();
			}
			break;
		case 2:
			if(this.get_todo().get_completed()) {
				this.hide();
			} else {
				this.show();
			}
			break;
		}
	}
	,show: function() {
		this.el.setAttribute("style","display:block;");
	}
	,hide: function() {
		this.el.setAttribute("style","display:none;");
	}
	,__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("\r\n    <input class=\"edit\" type=\"text\" value=\"" + StringTools.htmlEscape(Std.string(this.get_todo().get_label())) + "\" />\r\n    <div class=\"view\">\r\n      <input class=\"toggle\" type=\"checkbox\"" + StringTools.htmlEscape(this.get_todo().get_completed() ? " checked" : "") + " />\r\n      <label>" + StringTools.htmlEscape(Std.string(this.get_todo().get_label())) + "</label>\r\n      <button class=\"destroy\"></button>\r\n    </div>\r\n  ");
	}
	,__scout_ensureEl: function() {
		if(this.get_sel() != null) {
			this.set_el(window.document.querySelector(this.get_sel()));
		}
		if(this.el == null) {
			this.set_el(window.document.createElement("li"));
			this.el.setAttribute("class","todo-item");
			this.el.setAttribute("id",this.get_id());
		}
	}
	,get_id: function() {
		return this.attrs.id;
	}
	,get_todo: function() {
		return this.attrs.todo;
	}
	,get_store: function() {
		return this.attrs.store;
	}
	,get_sel: function() {
		return this.attrs.sel;
	}
	,__scout_init: function() {
		this.initializeVisibility();
		this.get_todo().props.editing.observe($bind(this,this.toggleEditMode));
		this.get_store().props.visible.observe($bind(this,this.isVisible));
		this.get_todo().props.completed.observe($bind(this,this.isVisible));
	}
	,__class__: todo_view_TodoItem
});
var todo_view_TodoList = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.attrs.store = attrs.store;
	this.attrs.sel = attrs.sel;
	this.__scout_ensureEl();
	var __c;
	if(attrs.body == null) {
		var _g = [];
		var todo1 = this.get_store().get_todos().iterator();
		while(todo1.hasNext()) {
			var todo2 = todo1.next();
			_g.push(this.makeTodo(todo2));
		}
		var this1 = new scout_EfficientChildrenImpl(_g);
		__c = this1;
	} else {
		__c = attrs.body;
	}
	__c.setParent(this);
	this.attrs.body = __c;
	this.__scout_init();
	this.events.push({ selector : ".filter-all", action : "click", method : $bind(this,this.filterAll)});
	this.events.push({ selector : ".filter-completed", action : "click", method : $bind(this,this.filterCompleted)});
	this.events.push({ selector : ".filter-pending", action : "click", method : $bind(this,this.filterPending)});
	this.delegateEvents(this.events);
};
todo_view_TodoList.__name__ = true;
todo_view_TodoList.__super__ = scout_View;
todo_view_TodoList.prototype = $extend(scout_View.prototype,{
	addTodo: function(todo1) {
		if(this.get_body().get_length() == 0) {
			this.render();
		}
		this.get_body().prepend(this.makeTodo(todo1));
	}
	,makeTodo: function(todo1) {
		return new todo_view_TodoItem({ sel : "#Todo-" + todo1.get_id(), id : "Todo-" + todo1.get_id(), todo : todo1, store : this.get_store()});
	}
	,removeTodo: function(todo1) {
		var view = this.get_body().find(function(view1) {
			return view1.get_todo() == todo1;
		});
		if(view != null) {
			this.get_body().remove(view);
		}
		if(this.get_body().get_length() == 0) {
			this.render();
		}
	}
	,updateCount: function(remaining) {
		var count = this.el.querySelector(".todo-count");
		if(count == null) {
			return;
		}
		count.innerHTML = this.todoCount(remaining);
	}
	,filterAll: function(e) {
		this.get_store().set_visible(todo_model_VisibleTodos.VisibleAll);
	}
	,filterCompleted: function(e) {
		this.get_store().set_visible(todo_model_VisibleTodos.VisibleCompleted);
	}
	,filterPending: function(e) {
		this.get_store().set_visible(todo_model_VisibleTodos.VisiblePending);
	}
	,__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("\r\n    <ul class=\"todo-list\">\r\n      " + this.get_body().toRenderResult() + "\r\n    </ul>\r\n    " + this.footer() + "\r\n  ");
	}
	,footer: function() {
		if(this.get_store().get_todos().get_length() > 0) {
			return scout__$RenderResult_RenderResult_$Impl_$._new("\r\n    <footer class=\"footer\">\r\n      <span class=\"todo-count\">" + this.todoCount(this.get_store().get_todosRemaining()) + "</span>\r\n      <ul class=\"filters\">\r\n        <li><a href=\"#all\" class=\"filter-all\">All</a></li>\r\n        <li><a href=\"#completed\" class=\"filter-completed\">Completed</a></li>\r\n        <li><a href=\"#pending\" class=\"filter-pending\">Pending</a></li>\r\n      </ul>\r\n    </footer>  \r\n  ");
		} else {
			return scout__$RenderResult_RenderResult_$Impl_$._new("");
		}
	}
	,todoCount: function(remaining) {
		switch(remaining) {
		case 0:
			return scout__$RenderResult_RenderResult_$Impl_$._new("No items left");
		case 1:
			return scout__$RenderResult_RenderResult_$Impl_$._new("1 item left");
		default:
			return scout__$RenderResult_RenderResult_$Impl_$._new("" + StringTools.htmlEscape(remaining == null ? "null" : "" + remaining) + " items left");
		}
	}
	,__scout_ensureEl: function() {
		if(this.get_sel() != null) {
			this.set_el(window.document.querySelector(this.get_sel()));
		}
		if(this.el == null) {
			this.set_el(window.document.createElement("div"));
			this.el.setAttribute("class","todo-list-wrapper");
		}
	}
	,get_store: function() {
		return this.attrs.store;
	}
	,get_body: function() {
		return this.attrs.body;
	}
	,get_sel: function() {
		return this.attrs.sel;
	}
	,__scout_init: function() {
		this.get_store().get_todos().onAdd.add($bind(this,this.addTodo),false);
		this.get_store().get_todos().onRemove.add($bind(this,this.removeTodo),false);
		this.get_store().props.todosRemaining.observe($bind(this,this.updateCount));
	}
	,__class__: todo_view_TodoList
});
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
scout_Dom.docNodeType = 9;
scout_View.__scout_ids = 0;
todo_model_Store.__scout_ids = 0;
todo_model_Todo.__scout_ids = 0;
TodoApp.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
