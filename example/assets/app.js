// Generated by Haxe 4.0.0-preview.4+1e3e5e016
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = {},$_;
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Run = function() { };
$hxClasses["Run"] = Run;
Run.__name__ = ["Run"];
Run.main = function() {
	var emu = new hex_unittest_runner_ExMachinaUnitCore();
	emu.addListener(new hex_unittest_notifier_BrowserUnitTestNotifier("Root"));
	emu.addListener(new hex_unittest_notifier_ExitingNotifier());
	emu.addDescriptor({ instance : null, type : scout_ModelTest, className : "scout.ModelTest", isSuiteClass : false, beforeClassFieldName : null, afterClassFieldName : null, setUpFieldName : null, tearDownFieldName : null, classDescriptors : [], methodDescriptors : [{ methodName : "testConstructor", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test) {
		test.testConstructor();
	}},{ methodName : "testSignalsWithObserve", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test1) {
		test1.testSignalsWithObserve();
	}},{ methodName : "signalDoesNotFireIfNoChange", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test2) {
		test2.signalDoesNotFireIfNoChange();
	}},{ methodName : "testSpecificSignals", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test3) {
		test3.testSpecificSignals();
	}},{ methodName : "testComputed", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test4) {
		test4.testComputed();
	}},{ methodName : "testAutoIncrement", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test5) {
		test5.testAutoIncrement();
	}},{ methodName : "testReactiveModel", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test6) {
		test6.testReactiveModel();
	}},{ methodName : "testTransitionableModel", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test7) {
		test7.testTransitionableModel();
	}},{ methodName : "testOptionalModel", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test8) {
		test8.testOptionalModel();
	}},{ methodName : "testModelsUseTheCorrectPropertyWithViews", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test9) {
		test9.testModelsUseTheCorrectPropertyWithViews();
	}}], classIndex : 0, methodIndex : 0, name : "", instanceCall : function() {
		return Object.create(scout_ModelTest.prototype);
	}, beforeCall : null, afterCall : null, setUpCall : null, tearDownCall : null});
	emu.addDescriptor({ instance : null, type : scout_CollectionTest, className : "scout.CollectionTest", isSuiteClass : false, beforeClassFieldName : null, afterClassFieldName : null, setUpFieldName : null, tearDownFieldName : null, classDescriptors : [], methodDescriptors : [{ methodName : "testBasics", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test10) {
		test10.testBasics();
	}},{ methodName : "testDoesNotAddDups", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test11) {
		test11.testDoesNotAddDups();
	}},{ methodName : "testAddRemoveLifecycle", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test12) {
		test12.testAddRemoveLifecycle();
	}},{ methodName : "testModelChanges", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test13) {
		test13.testModelChanges();
	}}], classIndex : 0, methodIndex : 0, name : "", instanceCall : function() {
		return Object.create(scout_CollectionTest.prototype);
	}, beforeCall : null, afterCall : null, setUpCall : null, tearDownCall : null});
	emu.addDescriptor({ instance : null, type : scout_ViewTest, className : "scout.ViewTest", isSuiteClass : false, beforeClassFieldName : null, afterClassFieldName : null, setUpFieldName : null, tearDownFieldName : null, classDescriptors : [], methodDescriptors : [{ methodName : "testSimpleView", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test14) {
		test14.testSimpleView();
	}},{ methodName : "testCustomElement", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test15) {
		test15.testCustomElement();
	}},{ methodName : "testChild", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test16) {
		test16.testChild();
	}},{ methodName : "testChildren", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test17) {
		test17.testChildren();
	}},{ methodName : "testStatefulView", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test18) {
		test18.testStatefulView();
	}},{ methodName : "testStateChild", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test19) {
		test19.testStateChild();
	}},{ methodName : "testModelView", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test20) {
		test20.testModelView();
	}},{ methodName : "testModelStateView", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test21) {
		test21.testModelStateView();
	}},{ methodName : "testCollectionView", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test22) {
		test22.testCollectionView();
	}}], classIndex : 0, methodIndex : 0, name : "", instanceCall : function() {
		return Object.create(scout_ViewTest.prototype);
	}, beforeCall : null, afterCall : null, setUpCall : null, tearDownCall : null});
	emu.addDescriptor({ instance : null, type : scout_TemplateTest, className : "scout.TemplateTest", isSuiteClass : false, beforeClassFieldName : null, afterClassFieldName : null, setUpFieldName : null, tearDownFieldName : null, classDescriptors : [], methodDescriptors : [{ methodName : "testEscape", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test23) {
		test23.testEscape();
	}},{ methodName : "testDoesNotEscapeNestedTemplates", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test24) {
		test24.testDoesNotEscapeNestedTemplates();
	}},{ methodName : "testArrays", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test25) {
		test25.testArrays();
	}},{ methodName : "testArraysFromVarOfStringArray", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test26) {
		test26.testArraysFromVarOfStringArray();
	}},{ methodName : "testArraysFromVarOfRenderResult", isAsync : false, isIgnored : false, description : "", timeout : 1500, dataProviderFieldName : "", dataProviderIndex : 0, functionCall : function(test27) {
		test27.testArraysFromVarOfRenderResult();
	}}], classIndex : 0, methodIndex : 0, name : "", instanceCall : function() {
		return Object.create(scout_TemplateTest.prototype);
	}, beforeCall : null, afterCall : null, setUpCall : null, tearDownCall : null});
	emu.run();
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var scout_Observable = function() { };
$hxClasses["scout.Observable"] = scout_Observable;
scout_Observable.__name__ = ["scout","Observable"];
scout_Observable.prototype = {
	__class__: scout_Observable
};
var scout_Model = function() { };
$hxClasses["scout.Model"] = scout_Model;
scout_Model.__name__ = ["scout","Model"];
scout_Model.__interfaces__ = [scout_Observable];
scout_Model.prototype = {
	__class__: scout_Model
	,__properties__: {set_id:"set_id",get_id:"get_id"}
};
var fixture_model_ComputedModel = function(props) {
	this.__scout_silent = false;
	this.onChange = { slots : []};
	this.props = { };
	this.props.foo = new scout_Property(props.foo);
	this.props.bar = new scout_Property(props.bar);
	this.props.fooBar = new scout_Property(props.fooBar);
	var tmp;
	if(props.id != null) {
		tmp = props.id;
	} else {
		var tmp1 = fixture_model_ComputedModel;
		tmp1.__scout_ids += 1;
		tmp = tmp1.__scout_ids;
	}
	this.props.id = new scout_Property(tmp);
	this.__scout_init();
};
$hxClasses["fixture.model.ComputedModel"] = fixture_model_ComputedModel;
fixture_model_ComputedModel.__name__ = ["fixture","model","ComputedModel"];
fixture_model_ComputedModel.__interfaces__ = [scout_Model];
fixture_model_ComputedModel.prototype = {
	get_foo: function() {
		return this.props.foo.get();
	}
	,set_foo: function(value) {
		this.props.foo.set(value);
		return value;
	}
	,get_bar: function() {
		return this.props.bar.get();
	}
	,set_bar: function(value) {
		this.props.bar.set(value);
		return value;
	}
	,get_fooBar: function() {
		return this.props.fooBar.get();
	}
	,__scout_init_fooBar: function() {
		this.props.fooBar.set(this.get_foo() + this.get_bar());
	}
	,get_id: function() {
		return this.props.id.get();
	}
	,set_id: function(value) {
		this.props.id.set(value);
		return value;
	}
	,__scout_init: function() {
		var _gthis = this;
		this.props.foo.observe(function(_) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
		this.props.bar.observe(function(_1) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
		this.props.fooBar.observe(function(_2) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
		this.__scout_init_fooBar();
		this.props.foo.observe(function(_3) {
			_gthis.__scout_init_fooBar();
			return;
		});
		this.props.bar.observe(function(_4) {
			_gthis.__scout_init_fooBar();
			return;
		});
		this.props.id.observe(function(_5) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
	}
	,observe: function(listener) {
		return scout__$Signal_Signal_$Impl_$.add(this.onChange,listener);
	}
	,__class__: fixture_model_ComputedModel
	,__properties__: {set_id:"set_id",get_id:"get_id",get_fooBar:"get_fooBar",set_bar:"set_bar",get_bar:"get_bar",set_foo:"set_foo",get_foo:"get_foo"}
};
var fixture_model_OptionalModel = function(props) {
	this.__scout_silent = false;
	this.onChange = { slots : []};
	this.props = { };
	this.props.name = new scout_Property(props.name);
	this.props.value = new scout_Property(props.value);
	var tmp;
	if(props.id != null) {
		tmp = props.id;
	} else {
		var tmp1 = fixture_model_OptionalModel;
		tmp1.__scout_ids += 1;
		tmp = tmp1.__scout_ids;
	}
	this.props.id = new scout_Property(tmp);
	this.__scout_init();
};
$hxClasses["fixture.model.OptionalModel"] = fixture_model_OptionalModel;
fixture_model_OptionalModel.__name__ = ["fixture","model","OptionalModel"];
fixture_model_OptionalModel.__interfaces__ = [scout_Model];
fixture_model_OptionalModel.prototype = {
	get_name: function() {
		return this.props.name.get();
	}
	,set_name: function(value) {
		this.props.name.set(value);
		return value;
	}
	,get_value: function() {
		return this.props.value.get();
	}
	,set_value: function(value) {
		this.props.value.set(value);
		return value;
	}
	,get_id: function() {
		return this.props.id.get();
	}
	,set_id: function(value) {
		this.props.id.set(value);
		return value;
	}
	,__scout_init: function() {
		var _gthis = this;
		this.props.name.observe(function(_) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
		this.props.value.observe(function(_1) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
		this.props.id.observe(function(_2) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
	}
	,observe: function(listener) {
		return scout__$Signal_Signal_$Impl_$.add(this.onChange,listener);
	}
	,__class__: fixture_model_OptionalModel
	,__properties__: {set_id:"set_id",get_id:"get_id",set_value:"set_value",get_value:"get_value",set_name:"set_name",get_name:"get_name"}
};
var fixture_model_ReactiveModel = function(props) {
	this.__scout_silent = false;
	this.onChange = { slots : []};
	this.changed = 0;
	this.props = { };
	this.props.foo = new scout_Property(props.foo);
	var tmp;
	if(props.id != null) {
		tmp = props.id;
	} else {
		var tmp1 = fixture_model_ReactiveModel;
		tmp1.__scout_ids += 1;
		tmp = tmp1.__scout_ids;
	}
	this.props.id = new scout_Property(tmp);
	this.__scout_init();
};
$hxClasses["fixture.model.ReactiveModel"] = fixture_model_ReactiveModel;
fixture_model_ReactiveModel.__name__ = ["fixture","model","ReactiveModel"];
fixture_model_ReactiveModel.__interfaces__ = [scout_Model];
fixture_model_ReactiveModel.prototype = {
	whenFooChanges: function(_) {
		this.changed++;
	}
	,get_foo: function() {
		return this.props.foo.get();
	}
	,set_foo: function(value) {
		this.props.foo.set(value);
		return value;
	}
	,get_id: function() {
		return this.props.id.get();
	}
	,set_id: function(value) {
		this.props.id.set(value);
		return value;
	}
	,__scout_init: function() {
		var _gthis = this;
		this.props.foo.observe(function(_) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
		this.props.foo.observe($bind(this,this.whenFooChanges));
		this.props.id.observe(function(_1) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
	}
	,observe: function(listener) {
		return scout__$Signal_Signal_$Impl_$.add(this.onChange,listener);
	}
	,__class__: fixture_model_ReactiveModel
	,__properties__: {set_id:"set_id",get_id:"get_id",set_foo:"set_foo",get_foo:"get_foo"}
};
var fixture_model_SimpleModel = function(props) {
	this.__scout_silent = false;
	this.onChange = { slots : []};
	this.props = { };
	this.props.name = new scout_Property(props.name);
	this.props.value = new scout_Property(props.value);
	var tmp;
	if(props.id != null) {
		tmp = props.id;
	} else {
		var tmp1 = fixture_model_SimpleModel;
		tmp1.__scout_ids += 1;
		tmp = tmp1.__scout_ids;
	}
	this.props.id = new scout_Property(tmp);
	this.__scout_init();
};
$hxClasses["fixture.model.SimpleModel"] = fixture_model_SimpleModel;
fixture_model_SimpleModel.__name__ = ["fixture","model","SimpleModel"];
fixture_model_SimpleModel.__interfaces__ = [scout_Model];
fixture_model_SimpleModel.prototype = {
	get_name: function() {
		return this.props.name.get();
	}
	,set_name: function(value) {
		this.props.name.set(value);
		return value;
	}
	,get_value: function() {
		return this.props.value.get();
	}
	,set_value: function(value) {
		this.props.value.set(value);
		return value;
	}
	,get_id: function() {
		return this.props.id.get();
	}
	,set_id: function(value) {
		this.props.id.set(value);
		return value;
	}
	,__scout_init: function() {
		var _gthis = this;
		this.props.name.observe(function(_) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
		this.props.value.observe(function(_1) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
		this.props.id.observe(function(_2) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
	}
	,observe: function(listener) {
		return scout__$Signal_Signal_$Impl_$.add(this.onChange,listener);
	}
	,__class__: fixture_model_SimpleModel
	,__properties__: {set_id:"set_id",get_id:"get_id",set_value:"set_value",get_value:"get_value",set_name:"set_name",get_name:"get_name"}
};
var fixture_model_TransitionableModel = function(props) {
	this.__scout_silent = false;
	this.onChange = { slots : []};
	this.props = { };
	this.props.name = new scout_Property(props.name);
	this.props.value = new scout_Property(props.value);
	var tmp;
	if(props.id != null) {
		tmp = props.id;
	} else {
		var tmp1 = fixture_model_TransitionableModel;
		tmp1.__scout_ids += 1;
		tmp = tmp1.__scout_ids;
	}
	this.props.id = new scout_Property(tmp);
	this.__scout_init();
};
$hxClasses["fixture.model.TransitionableModel"] = fixture_model_TransitionableModel;
fixture_model_TransitionableModel.__name__ = ["fixture","model","TransitionableModel"];
fixture_model_TransitionableModel.__interfaces__ = [scout_Model];
fixture_model_TransitionableModel.prototype = {
	setNameAndValue: function(name,value) {
		this.__scout_silent = true;
		this.set_name(name);
		this.set_value(value);
		this.__scout_silent = false;
		scout__$Signal_Signal_$Impl_$.dispatch(this.onChange,this);
	}
	,get_name: function() {
		return this.props.name.get();
	}
	,set_name: function(value) {
		this.props.name.set(value);
		return value;
	}
	,get_value: function() {
		return this.props.value.get();
	}
	,set_value: function(value) {
		this.props.value.set(value);
		return value;
	}
	,get_id: function() {
		return this.props.id.get();
	}
	,set_id: function(value) {
		this.props.id.set(value);
		return value;
	}
	,__scout_init: function() {
		var _gthis = this;
		this.props.name.observe(function(_) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
		this.props.value.observe(function(_1) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
		this.props.id.observe(function(_2) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
	}
	,observe: function(listener) {
		return scout__$Signal_Signal_$Impl_$.add(this.onChange,listener);
	}
	,__class__: fixture_model_TransitionableModel
	,__properties__: {set_id:"set_id",get_id:"get_id",set_value:"set_value",get_value:"get_value",set_name:"set_name",get_name:"get_name"}
};
var fixture_model_WithViewModel = function(props) {
	this.__scout_silent = false;
	this.onChange = { slots : []};
	this.props = { };
	this.props.view = new scout_Property(props.view);
	var tmp;
	if(props.id != null) {
		tmp = props.id;
	} else {
		var tmp1 = fixture_model_WithViewModel;
		tmp1.__scout_ids += 1;
		tmp = tmp1.__scout_ids;
	}
	this.props.id = new scout_Property(tmp);
	this.__scout_init();
};
$hxClasses["fixture.model.WithViewModel"] = fixture_model_WithViewModel;
fixture_model_WithViewModel.__name__ = ["fixture","model","WithViewModel"];
fixture_model_WithViewModel.__interfaces__ = [scout_Model];
fixture_model_WithViewModel.prototype = {
	get_view: function() {
		return this.props.view.get();
	}
	,set_view: function(value) {
		this.props.view.set(value);
		return value;
	}
	,get_id: function() {
		return this.props.id.get();
	}
	,set_id: function(value) {
		this.props.id.set(value);
		return value;
	}
	,__scout_init: function() {
		var _gthis = this;
		this.props.view.observe(function(_) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
		this.props.id.observe(function(_1) {
			if(!_gthis.__scout_silent) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}
		});
	}
	,observe: function(listener) {
		return scout__$Signal_Signal_$Impl_$.add(this.onChange,listener);
	}
	,__class__: fixture_model_WithViewModel
	,__properties__: {set_id:"set_id",get_id:"get_id",set_view:"set_view",get_view:"get_view"}
};
var scout_Renderable = function() { };
$hxClasses["scout.Renderable"] = scout_Renderable;
scout_Renderable.__name__ = ["scout","Renderable"];
scout_Renderable.prototype = {
	__class__: scout_Renderable
};
var scout_Child = function() { };
$hxClasses["scout.Child"] = scout_Child;
scout_Child.__name__ = ["scout","Child"];
scout_Child.__interfaces__ = [scout_Renderable];
scout_Child.prototype = {
	__class__: scout_Child
};
var scout_View = function() {
	this.delegatedEvents = [];
	this.events = [];
	this.parentListeners = [];
	this.onRemove = { slots : []};
	this.onReady = { slots : []};
	this.afterRender = { slots : []};
	this.beforeRender = { slots : []};
	this.cid = "__scout_view_" + scout_View.__scout_ids++;
};
$hxClasses["scout.View"] = scout_View;
scout_View.__name__ = ["scout","View"];
scout_View.__interfaces__ = [scout_Child,scout_Renderable];
scout_View.prototype = {
	set_el: function(el) {
		if(this.delegatedEvents.length > 0) {
			this.undelegateEvents();
		}
		this.el = el;
		if(this.events.length > 0) {
			this.delegateEvents(this.events);
		}
		return el;
	}
	,get_content: function() {
		return this.el.outerHTML;
	}
	,set_content: function(content) {
		return this.el.innerHTML = content;
	}
	,__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("");
	}
	,__scout_doRender: function() {
		this.set_content(this.__scout_render());
	}
	,shouldRender: function() {
		return true;
	}
	,render: function() {
		if(this.shouldRender()) {
			scout__$Signal_Signal_$Impl_$.dispatch(this.beforeRender,this);
			this.__scout_doRender();
			scout__$Signal_Signal_$Impl_$.dispatch(this.afterRender,this);
		}
		return this;
	}
	,setParent: function(parent) {
		var _gthis = this;
		this.detachFromParent();
		this.parent = parent;
		if((this.parent instanceof scout_View)) {
			var view = this.parent;
			this.parentListeners = [scout__$Signal_Signal_$Impl_$.add(view.onRemove,function(_) {
				_gthis.remove();
			}),scout__$Signal_Signal_$Impl_$.add(view.beforeRender,function(_1) {
				_gthis.detach();
			}),scout__$Signal_Signal_$Impl_$.add(view.afterRender,function(_2) {
				_gthis.attach();
			})];
		}
	}
	,detachFromParent: function() {
		var _g = 0;
		var _g1 = this.parentListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			var this1 = listener.signal;
			this1.slots = this1.slots.filter((function(listener1) {
				return function(slot) {
					return slot.listener != listener1[0];
				};
			})([listener.listener]));
		}
		this.parentListeners = [];
		this.detach();
		this.parent = null;
	}
	,toRenderResult: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("<div id=\"" + StringTools.htmlEscape(Std.string(this.cid)) + "\"></div>");
	}
	,detach: function() {
		if(this.el.parentElement != null) {
			this.el.parentElement.removeChild(this.el);
		}
	}
	,attach: function() {
		if(this.parent == null) {
			return;
		}
		if((this.parent instanceof scout_View)) {
			var view = this.parent;
			var target = view.el.querySelector("#" + this.cid);
			if(target != null) {
				target.parentNode.replaceChild(this.render().el,target);
			}
		}
	}
	,remove: function() {
		scout__$Signal_Signal_$Impl_$.dispatch(this.onRemove,this);
		this.undelegateEvents();
		this.el.remove();
	}
	,delegateEvents: function(events) {
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			var e = scout_Dom.delegate(this.el,event.selector,event.action,event.method);
			this.delegatedEvents.push(e);
		}
	}
	,undelegateEvents: function() {
		var _g = 0;
		var _g1 = this.delegatedEvents;
		while(_g < _g1.length) {
			var binding = _g1[_g];
			++_g;
			binding.destroy();
		}
		this.delegatedEvents = [];
	}
	,__class__: scout_View
	,__properties__: {set_content:"set_content",get_content:"get_content",set_el:"set_el"}
};
var fixture_view_ChildrenView = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.__scout_ensureEl();
	var __c = attrs.body;
	__c.setParent(this);
	this.attrs.body = __c;
	this.delegateEvents(this.events);
};
$hxClasses["fixture.view.ChildrenView"] = fixture_view_ChildrenView;
fixture_view_ChildrenView.__name__ = ["fixture","view","ChildrenView"];
fixture_view_ChildrenView.__super__ = scout_View;
fixture_view_ChildrenView.prototype = $extend(scout_View.prototype,{
	__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("<div class=\"content\">" + this.get_body().toRenderResult() + "</div>");
	}
	,__scout_ensureEl: function() {
		if(this.el == null) {
			this.set_el(window.document.createElement("div"));
		}
	}
	,get_body: function() {
		return this.attrs.body;
	}
	,__class__: fixture_view_ChildrenView
	,__properties__: $extend(scout_View.prototype.__properties__,{get_body:"get_body"})
});
var fixture_view_CustomElementView = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.attrs.foo = attrs.foo;
	this.attrs.className = attrs.className;
	this.__scout_ensureEl();
	this.delegateEvents(this.events);
};
$hxClasses["fixture.view.CustomElementView"] = fixture_view_CustomElementView;
fixture_view_CustomElementView.__name__ = ["fixture","view","CustomElementView"];
fixture_view_CustomElementView.__super__ = scout_View;
fixture_view_CustomElementView.prototype = $extend(scout_View.prototype,{
	__scout_ensureEl: function() {
		if(this.el == null) {
			this.set_el(window.document.createElement("span"));
			this.el.setAttribute("class",this.get_className());
			this.el.setAttribute("id",this.cid);
			this.el.setAttribute("data-foo",this.get_foo());
			this.el.setAttribute("data-bar","bar");
		}
	}
	,get_foo: function() {
		return this.attrs.foo;
	}
	,get_className: function() {
		return this.attrs.className;
	}
	,__class__: fixture_view_CustomElementView
	,__properties__: $extend(scout_View.prototype.__properties__,{get_className:"get_className",get_foo:"get_foo"})
});
var fixture_view_SimpleView = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.attrs.greeting = attrs.greeting != null ? attrs.greeting : "hello";
	this.attrs.location = attrs.location != null ? attrs.location : "world";
	this.__scout_ensureEl();
	this.delegateEvents(this.events);
};
$hxClasses["fixture.view.SimpleView"] = fixture_view_SimpleView;
fixture_view_SimpleView.__name__ = ["fixture","view","SimpleView"];
fixture_view_SimpleView.__super__ = scout_View;
fixture_view_SimpleView.prototype = $extend(scout_View.prototype,{
	__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("<p>" + StringTools.htmlEscape(Std.string(this.get_greeting())) + " " + StringTools.htmlEscape(Std.string(this.get_location())) + "</p>");
	}
	,__scout_ensureEl: function() {
		if(this.el == null) {
			this.set_el(window.document.createElement("div"));
		}
	}
	,get_greeting: function() {
		return this.attrs.greeting;
	}
	,get_location: function() {
		return this.attrs.location;
	}
	,__class__: fixture_view_SimpleView
	,__properties__: $extend(scout_View.prototype.__properties__,{get_location:"get_location",get_greeting:"get_greeting"})
});
var fixture_view_SingleChildView = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.__scout_ensureEl();
	var __c = attrs.child;
	__c.setParent(this);
	this.attrs.child = __c;
	this.delegateEvents(this.events);
};
$hxClasses["fixture.view.SingleChildView"] = fixture_view_SingleChildView;
fixture_view_SingleChildView.__name__ = ["fixture","view","SingleChildView"];
fixture_view_SingleChildView.__super__ = scout_View;
fixture_view_SingleChildView.prototype = $extend(scout_View.prototype,{
	__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("<div class=\"content\">" + this.get_child().toRenderResult() + "</div>");
	}
	,__scout_ensureEl: function() {
		if(this.el == null) {
			this.set_el(window.document.createElement("div"));
		}
	}
	,get_child: function() {
		return this.attrs.child;
	}
	,__class__: fixture_view_SingleChildView
	,__properties__: $extend(scout_View.prototype.__properties__,{get_child:"get_child"})
});
var fixture_view_SingleStateChildView = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.attrs.child = new scout_PropertyOfChild(this,attrs.child);
	this.__scout_ensureEl();
	this.attrs.child.observe($bind(this,this.update));
	this.delegateEvents(this.events);
};
$hxClasses["fixture.view.SingleStateChildView"] = fixture_view_SingleStateChildView;
fixture_view_SingleStateChildView.__name__ = ["fixture","view","SingleStateChildView"];
fixture_view_SingleStateChildView.__super__ = scout_View;
fixture_view_SingleStateChildView.prototype = $extend(scout_View.prototype,{
	update: function(_) {
		this.render();
	}
	,__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("<div class=\"content\">" + this.get_child().toRenderResult() + "</div>");
	}
	,__scout_ensureEl: function() {
		if(this.el == null) {
			this.set_el(window.document.createElement("div"));
		}
	}
	,get_child: function() {
		return this.attrs.child.get();
	}
	,set_child: function(value) {
		this.attrs.child.set(value);
		return value;
	}
	,__class__: fixture_view_SingleStateChildView
	,__properties__: $extend(scout_View.prototype.__properties__,{set_child:"set_child",get_child:"get_child"})
});
var fixture_view_StatefulView = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.attrs.foo = new scout_Property(attrs.foo);
	this.__scout_ensureEl();
	this.attrs.foo.observe($bind(this,this.doRender));
	this.delegateEvents(this.events);
};
$hxClasses["fixture.view.StatefulView"] = fixture_view_StatefulView;
fixture_view_StatefulView.__name__ = ["fixture","view","StatefulView"];
fixture_view_StatefulView.__super__ = scout_View;
fixture_view_StatefulView.prototype = $extend(scout_View.prototype,{
	doRender: function(_) {
		this.render();
	}
	,__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("" + StringTools.htmlEscape(Std.string(this.get_foo())));
	}
	,__scout_ensureEl: function() {
		if(this.el == null) {
			this.set_el(window.document.createElement("div"));
		}
	}
	,get_foo: function() {
		return this.attrs.foo.get();
	}
	,set_foo: function(value) {
		this.attrs.foo.set(value);
		return value;
	}
	,__class__: fixture_view_StatefulView
	,__properties__: $extend(scout_View.prototype.__properties__,{set_foo:"set_foo",get_foo:"get_foo"})
});
var fixture_view_WithCollectionView = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.attrs.collection = attrs.collection;
	this.__scout_ensureEl();
	var __c;
	if(attrs.body == null) {
		var _g = [];
		var model = this.get_collection().iterator();
		while(model.hasNext()) {
			var model1 = model.next();
			_g.push(this.makeView(model1));
		}
		var this1 = new scout_ChildrenImpl(_g);
		__c = this1;
	} else {
		__c = attrs.body;
	}
	__c.setParent(this);
	this.attrs.body = __c;
	scout__$Signal_Signal_$Impl_$.toObservable(this.get_collection().onAdd).observe($bind(this,this.addViewForModel));
	scout__$Signal_Signal_$Impl_$.toObservable(this.get_collection().onRemove).observe($bind(this,this.removeViewForModel));
	this.delegateEvents(this.events);
};
$hxClasses["fixture.view.WithCollectionView"] = fixture_view_WithCollectionView;
fixture_view_WithCollectionView.__name__ = ["fixture","view","WithCollectionView"];
fixture_view_WithCollectionView.__super__ = scout_View;
fixture_view_WithCollectionView.prototype = $extend(scout_View.prototype,{
	addViewForModel: function(model) {
		this.get_body().add(this.makeView(model));
	}
	,makeView: function(model) {
		return new fixture_view_WithModelView({ model : model});
	}
	,removeViewForModel: function(model) {
		var view = this.get_body().find(function(v) {
			return v.get_model() == model;
		});
		if(view != null) {
			this.get_body().remove(view);
		}
	}
	,__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("" + this.get_body().toRenderResult());
	}
	,__scout_ensureEl: function() {
		if(this.el == null) {
			this.set_el(window.document.createElement("div"));
		}
	}
	,get_collection: function() {
		return this.attrs.collection;
	}
	,get_body: function() {
		return this.attrs.body;
	}
	,__class__: fixture_view_WithCollectionView
	,__properties__: $extend(scout_View.prototype.__properties__,{get_body:"get_body",get_collection:"get_collection"})
});
var fixture_view_WithModelStateView = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.attrs.model = new scout_PropertyOfObservable(attrs.model);
	this.__scout_ensureEl();
	this.attrs.model.observe($bind(this,this.update));
	this.delegateEvents(this.events);
};
$hxClasses["fixture.view.WithModelStateView"] = fixture_view_WithModelStateView;
fixture_view_WithModelStateView.__name__ = ["fixture","view","WithModelStateView"];
fixture_view_WithModelStateView.__super__ = scout_View;
fixture_view_WithModelStateView.prototype = $extend(scout_View.prototype,{
	update: function(_) {
		this.render();
	}
	,__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("" + StringTools.htmlEscape(Std.string(this.get_model().get_name())) + " " + StringTools.htmlEscape(Std.string(this.get_model().get_value())));
	}
	,__scout_ensureEl: function() {
		if(this.el == null) {
			this.set_el(window.document.createElement("div"));
		}
	}
	,get_model: function() {
		return this.attrs.model.get();
	}
	,set_model: function(value) {
		this.attrs.model.set(value);
		return value;
	}
	,__class__: fixture_view_WithModelStateView
	,__properties__: $extend(scout_View.prototype.__properties__,{set_model:"set_model",get_model:"get_model"})
});
var fixture_view_WithModelView = function(attrs) {
	scout_View.call(this);
	this.attrs = { };
	this.attrs.model = attrs.model;
	this.__scout_ensureEl();
	this.attrs.model.observe($bind(this,this.update));
	this.delegateEvents(this.events);
};
$hxClasses["fixture.view.WithModelView"] = fixture_view_WithModelView;
fixture_view_WithModelView.__name__ = ["fixture","view","WithModelView"];
fixture_view_WithModelView.__super__ = scout_View;
fixture_view_WithModelView.prototype = $extend(scout_View.prototype,{
	update: function(_) {
		this.render();
	}
	,__scout_render: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("" + StringTools.htmlEscape(Std.string(this.get_model().get_name())) + " " + StringTools.htmlEscape(Std.string(this.get_model().get_value())));
	}
	,__scout_ensureEl: function() {
		if(this.el == null) {
			this.set_el(window.document.createElement("div"));
		}
	}
	,get_model: function() {
		return this.attrs.model;
	}
	,__class__: fixture_view_WithModelView
	,__properties__: $extend(scout_View.prototype.__properties__,{get_model:"get_model"})
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos != null && infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = ["haxe","ds","GenericCell"];
haxe_ds_GenericCell.prototype = {
	__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = ["haxe","ds","GenericStack"];
haxe_ds_GenericStack.prototype = {
	__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g1 = 0;
		var _g = keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getStatics = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.statics == null) {
		return { };
	} else {
		return meta.statics;
	}
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var hex_collection_IHashMap = function() { };
$hxClasses["hex.collection.IHashMap"] = hex_collection_IHashMap;
hex_collection_IHashMap.__name__ = ["hex","collection","IHashMap"];
hex_collection_IHashMap.prototype = {
	__class__: hex_collection_IHashMap
};
var hex_collection_HashMap = function(initial) {
	this._init();
	if(initial != null) {
		var k = initial.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			this.put(k1,initial.get(k1));
		}
	}
};
$hxClasses["hex.collection.HashMap"] = hex_collection_HashMap;
hex_collection_HashMap.__name__ = ["hex","collection","HashMap"];
hex_collection_HashMap.__interfaces__ = [hex_collection_IHashMap];
hex_collection_HashMap.prototype = {
	_init: function() {
		this._keys = new haxe_ds_StringMap();
		this._values = new haxe_ds_StringMap();
		this._size = 0;
	}
	,clear: function() {
		this._init();
	}
	,containsKey: function(key) {
		if(key != null) {
			var this1 = this._keys;
			var key1 = this._getName(key);
			var _this = this1;
			if(__map_reserved[key1] != null) {
				return _this.existsReserved(key1);
			} else {
				return _this.h.hasOwnProperty(key1);
			}
		} else {
			throw new js__$Boot_HaxeError(new hex_error_NullPointerException("Key can't be null",{ fileName : "hex/collection/HashMap.hx", lineNumber : 60, className : "hex.collection.HashMap", methodName : "containsKey"}));
		}
	}
	,containsValue: function(value) {
		if(value != null) {
			var this1 = this._values;
			var key = this._getName(value);
			var _this = this1;
			if(__map_reserved[key] != null) {
				return _this.existsReserved(key);
			} else {
				return _this.h.hasOwnProperty(key);
			}
		} else {
			throw new js__$Boot_HaxeError(new hex_error_NullPointerException("Value can't be null",{ fileName : "hex/collection/HashMap.hx", lineNumber : 83, className : "hex.collection.HashMap", methodName : "containsValue"}));
		}
	}
	,get: function(key) {
		if(key != null) {
			var this1 = this._keys;
			var key1 = this._getName(key);
			var _this = this1;
			if(__map_reserved[key1] != null) {
				return _this.getReserved(key1);
			} else {
				return _this.h[key1];
			}
		} else {
			throw new js__$Boot_HaxeError(new hex_error_NullPointerException("Key can't be null",{ fileName : "hex/collection/HashMap.hx", lineNumber : 115, className : "hex.collection.HashMap", methodName : "get"}));
		}
	}
	,isEmpty: function() {
		return this._size == 0;
	}
	,put: function(key,value) {
		var oldValue = null;
		if(key == null) {
			throw new js__$Boot_HaxeError(new hex_error_NullPointerException("Key can't be null",{ fileName : "hex/collection/HashMap.hx", lineNumber : 150, className : "hex.collection.HashMap", methodName : "put"}));
		} else if(value == null) {
			throw new js__$Boot_HaxeError(new hex_error_NullPointerException("Value can't be null",{ fileName : "hex/collection/HashMap.hx", lineNumber : 154, className : "hex.collection.HashMap", methodName : "put"}));
		} else {
			if(this.containsKey(key)) {
				oldValue = this.remove(key);
			}
			this._size++;
			var this1 = this._keys;
			var key1 = this._getName(key);
			var _this = this1;
			if(__map_reserved[key1] != null) {
				_this.setReserved(key1,value);
			} else {
				_this.h[key1] = value;
			}
			var this2 = this._values;
			var key2 = this._getName(value);
			var _this1 = this2;
			if(__map_reserved[key2] != null) {
				_this1.setReserved(key2,key);
			} else {
				_this1.h[key2] = key;
			}
			return oldValue;
		}
	}
	,_getName: function(o) {
		var s;
		if(typeof(o) == "string") {
			s = "_S" + Std.string(o);
		} else if(typeof(o) == "boolean") {
			s = "_B" + Std.string(o);
		} else if(typeof(o) == "number") {
			s = "_N" + Std.string(o);
		} else {
			s = "_O" + hex_core_HashCodeFactory.getKey(o);
		}
		return s;
	}
	,remove: function(key) {
		if(key != null) {
			var sKID = this._getName(key);
			var _this = this._keys;
			if(__map_reserved[sKID] != null ? _this.existsReserved(sKID) : _this.h.hasOwnProperty(sKID)) {
				var _this1 = this._keys;
				var sVID = this._getName(__map_reserved[sKID] != null ? _this1.getReserved(sKID) : _this1.h[sKID]);
				var _this2 = this._keys;
				var value = __map_reserved[sKID] != null ? _this2.getReserved(sKID) : _this2.h[sKID];
				this._values.remove(sVID);
				this._keys.remove(sKID);
				this._size--;
				return value;
			} else {
				return null;
			}
		} else {
			throw new js__$Boot_HaxeError(new hex_error_NullPointerException("Key can't be null",{ fileName : "hex/collection/HashMap.hx", lineNumber : 239, className : "hex.collection.HashMap", methodName : "remove"}));
		}
	}
	,size: function() {
		return this._size;
	}
	,getKeys: function() {
		var a = [];
		var _this = this._values;
		var it = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(it.hasNext()) a.push(it.next());
		return a;
	}
	,getValues: function() {
		var a = [];
		var _this = this._keys;
		var it = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(it.hasNext()) a.push(it.next());
		return a;
	}
	,__class__: hex_collection_HashMap
};
var hex_core_HashCodeFactory = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException(null,{ fileName : "hex/core/HashCodeFactory.hx", lineNumber : 15, className : "hex.core.HashCodeFactory", methodName : "new"}));
};
$hxClasses["hex.core.HashCodeFactory"] = hex_core_HashCodeFactory;
hex_core_HashCodeFactory.__name__ = ["hex","core","HashCodeFactory"];
hex_core_HashCodeFactory.getNextKEY = function() {
	return hex_core_HashCodeFactory._nKEY++;
};
hex_core_HashCodeFactory.getNextName = function() {
	return "" + hex_core_HashCodeFactory._nKEY;
};
hex_core_HashCodeFactory.getKey = function(o) {
	if(hex_core_HashCodeFactory._M.h.__keys__[o.__id__] == null) {
		hex_core_HashCodeFactory._M.set(o,hex_core_HashCodeFactory.getNextKEY());
	}
	return hex_core_HashCodeFactory._M.h[o.__id__];
};
hex_core_HashCodeFactory.previewNextKey = function() {
	return hex_core_HashCodeFactory._nKEY;
};
hex_core_HashCodeFactory.prototype = {
	__class__: hex_core_HashCodeFactory
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
$hxClasses["tink.core.TypedError"] = tink_core_TypedError;
tink_core_TypedError.__name__ = ["tink","core","TypedError"];
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		var _g = tink_core_TypedError.asError(e1);
		var tmp;
		if(_g == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1);
		} else {
			var e2 = _g;
			tmp = e2;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw js__$Boot_HaxeError.wrap(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		var any = this;
		throw js__$Boot_HaxeError.wrap(any);
	}
	,__class__: tink_core_TypedError
};
var hex_error_IllegalArgumentException = function(message,posInfos) {
	tink_core_TypedError.call(this,this.code,message,this.pos);
};
$hxClasses["hex.error.IllegalArgumentException"] = hex_error_IllegalArgumentException;
hex_error_IllegalArgumentException.__name__ = ["hex","error","IllegalArgumentException"];
hex_error_IllegalArgumentException.__super__ = tink_core_TypedError;
hex_error_IllegalArgumentException.prototype = $extend(tink_core_TypedError.prototype,{
	__class__: hex_error_IllegalArgumentException
});
var hex_error_IllegalStateException = function(message,posInfos) {
	tink_core_TypedError.call(this,this.code,message,this.pos);
};
$hxClasses["hex.error.IllegalStateException"] = hex_error_IllegalStateException;
hex_error_IllegalStateException.__name__ = ["hex","error","IllegalStateException"];
hex_error_IllegalStateException.__super__ = tink_core_TypedError;
hex_error_IllegalStateException.prototype = $extend(tink_core_TypedError.prototype,{
	__class__: hex_error_IllegalStateException
});
var hex_error_NoSuchElementException = function(message,posInfos) {
	tink_core_TypedError.call(this,this.code,message,this.pos);
};
$hxClasses["hex.error.NoSuchElementException"] = hex_error_NoSuchElementException;
hex_error_NoSuchElementException.__name__ = ["hex","error","NoSuchElementException"];
hex_error_NoSuchElementException.__super__ = tink_core_TypedError;
hex_error_NoSuchElementException.prototype = $extend(tink_core_TypedError.prototype,{
	__class__: hex_error_NoSuchElementException
});
var hex_error_NullPointerException = function(message,posInfos) {
	tink_core_TypedError.call(this,this.code,message,this.pos);
};
$hxClasses["hex.error.NullPointerException"] = hex_error_NullPointerException;
hex_error_NullPointerException.__name__ = ["hex","error","NullPointerException"];
hex_error_NullPointerException.__super__ = tink_core_TypedError;
hex_error_NullPointerException.prototype = $extend(tink_core_TypedError.prototype,{
	__class__: hex_error_NullPointerException
});
var hex_error_PrivateConstructorException = function(message,posInfos) {
	if(message == null) {
		message = "This class can't be instantiated.";
	}
	tink_core_TypedError.call(this,this.code,message,this.pos);
};
$hxClasses["hex.error.PrivateConstructorException"] = hex_error_PrivateConstructorException;
hex_error_PrivateConstructorException.__name__ = ["hex","error","PrivateConstructorException"];
hex_error_PrivateConstructorException.__super__ = tink_core_TypedError;
hex_error_PrivateConstructorException.prototype = $extend(tink_core_TypedError.prototype,{
	__class__: hex_error_PrivateConstructorException
});
var hex_event_ITrigger = function() { };
$hxClasses["hex.event.ITrigger"] = hex_event_ITrigger;
hex_event_ITrigger.__name__ = ["hex","event","ITrigger"];
hex_event_ITrigger.prototype = {
	__class__: hex_event_ITrigger
};
var hex_event_ITriggerOwner = function() { };
$hxClasses["hex.event.ITriggerOwner"] = hex_event_ITriggerOwner;
hex_event_ITriggerOwner.__name__ = ["hex","event","ITriggerOwner"];
var hex_unittest_assertion_Assert = function() { };
$hxClasses["hex.unittest.assertion.Assert"] = hex_unittest_assertion_Assert;
hex_unittest_assertion_Assert.__name__ = ["hex","unittest","assertion","Assert"];
hex_unittest_assertion_Assert._LOG_ASSERT = function(userMessage) {
	hex_unittest_assertion_Assert._assertCount++;
	hex_unittest_assertion_Assert._lastAssertionLog = userMessage;
	hex_unittest_assertion_Assert._assertionLogs.push(userMessage);
};
hex_unittest_assertion_Assert.getAssertionCount = function() {
	return hex_unittest_assertion_Assert._assertCount;
};
hex_unittest_assertion_Assert.getAssertionFailedCount = function() {
	return hex_unittest_assertion_Assert._assertFailedCount;
};
hex_unittest_assertion_Assert.getLastAssertionLog = function() {
	return hex_unittest_assertion_Assert._lastAssertionLog;
};
hex_unittest_assertion_Assert.getAssertionLogs = function() {
	return hex_unittest_assertion_Assert._assertionLogs;
};
hex_unittest_assertion_Assert.resetAssertionLog = function() {
	hex_unittest_assertion_Assert._assertCount = 0;
	hex_unittest_assertion_Assert._assertFailedCount = 0;
	hex_unittest_assertion_Assert._lastAssertionLog = "";
	hex_unittest_assertion_Assert._assertionLogs = [];
};
hex_unittest_assertion_Assert.isTrue = function(value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(value != true) {
		hex_unittest_assertion_Assert._fail("Expected true but was '" + (value == null ? "null" : "" + value) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.isFalse = function(value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(value != false) {
		hex_unittest_assertion_Assert._fail("Expected false but was '" + (value == null ? "null" : "" + value) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.isNull = function(value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(value != null) {
		hex_unittest_assertion_Assert._fail("Expected null but was '" + Std.string(value) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.isNotNull = function(value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(value == null) {
		hex_unittest_assertion_Assert._fail("Expected not null but was 'null'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.isInstanceOf = function(value,type,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(!js_Boot.__instanceof(value,type)) {
		hex_unittest_assertion_Assert._fail("Expected '" + Type.getClassName(type) + "' but was '" + Std.string(value) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.isNotInstanceOf = function(value,type,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(js_Boot.__instanceof(value,type)) {
		hex_unittest_assertion_Assert._fail("Value '" + Std.string(value) + "' was not of type '" + Type.getClassName(type) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.equals = function(expected,value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(expected != value) {
		hex_unittest_assertion_Assert._fail("Expected '" + Std.string(expected) + "' but was '" + Std.string(value) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.notEquals = function(expected,value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(expected == value) {
		hex_unittest_assertion_Assert._fail("Expected '" + Std.string(expected) + "' was not equal to '" + Std.string(value) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.deepEquals = function(expected,value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(!jsonStream_testUtil_JsonEquality.deepEquals(expected,value)) {
		hex_unittest_assertion_Assert._fail("Expected '" + Std.string(expected) + "' but was '" + Std.string(value) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.notDeepEquals = function(expected,value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	if(jsonStream_testUtil_JsonEquality.deepEquals(expected,value)) {
		hex_unittest_assertion_Assert._fail("Expected '" + Std.string(expected) + "' was not deep equal to '" + Std.string(value) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.arrayContainsElement = function(a,value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	if(a.indexOf(value) == -1) {
		hex_unittest_assertion_Assert._fail("Array '" + Std.string(a) + "' should contain '" + Std.string(value) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.arrayDeepContainsElement = function(a,value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	var contains = false;
	var _g = 0;
	while(_g < a.length) {
		var e = a[_g];
		++_g;
		if(jsonStream_testUtil_JsonEquality.deepEquals(e,value)) {
			contains = true;
			break;
		}
	}
	if(!contains) {
		hex_unittest_assertion_Assert._fail("Array '" + Std.string(a) + "' should contain '" + Std.string(value) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.arrayNotContainsElement = function(a,value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	if(hex_util_ArrayUtil.indexOf(a,value) != -1) {
		hex_unittest_assertion_Assert._fail("Array '" + Std.string(a) + "' should not contain '" + Std.string(value) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.arrayContainsElementsFrom = function(expected,value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	var _g = 0;
	while(_g < value.length) {
		var element = value[_g];
		++_g;
		if(hex_util_ArrayUtil.indexOf(expected,element) == -1) {
			hex_unittest_assertion_Assert._fail("Array '" + Std.string(expected) + "' should contain '" + Std.string(element) + "'",userMessage,posInfos);
		}
	}
};
hex_unittest_assertion_Assert.arrayDeepContainsElementsFrom = function(expected,value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	var _g = 0;
	while(_g < value.length) {
		var element = value[_g];
		++_g;
		var contains = false;
		var _g1 = 0;
		while(_g1 < expected.length) {
			var e = expected[_g1];
			++_g1;
			if(jsonStream_testUtil_JsonEquality.deepEquals(e,element)) {
				contains = true;
				break;
			}
		}
		if(!contains) {
			hex_unittest_assertion_Assert._fail("Array '" + Std.string(expected) + "' should contain '" + Std.string(element) + "'",userMessage,posInfos);
		}
	}
};
hex_unittest_assertion_Assert.arrayNotContainsElementsFrom = function(expected,value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	var _g = 0;
	while(_g < value.length) {
		var element = value[_g];
		++_g;
		if(expected.indexOf(element) != -1) {
			hex_unittest_assertion_Assert._fail("Array '" + Std.string(expected) + "' should not contain '" + Std.string(element) + "'",userMessage,posInfos);
		}
	}
};
hex_unittest_assertion_Assert.constructorCallThrows = function(expectedException,type,args,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	var expectedExceptionType = Type.getClassName(expectedException);
	var exceptionCaught = null;
	try {
		Type.createInstance(type,args);
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		if((e1 instanceof tink_core_TypedError)) {
			exceptionCaught = e1;
		} else {
			throw e;
		}
	}
	if(exceptionCaught == null || exceptionCaught != null && (exceptionCaught == null ? null : js_Boot.getClass(exceptionCaught)) != expectedException) {
		hex_unittest_assertion_Assert._fail("Expected '" + expectedExceptionType + "' but was '" + Std.string(exceptionCaught) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.constructorIsPrivate = function(type,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	var exceptionCaught = null;
	try {
		Type.createInstance(type,[]);
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		if((e1 instanceof tink_core_TypedError)) {
			exceptionCaught = e1;
		} else {
			throw e;
		}
	}
	if(exceptionCaught == null || exceptionCaught != null && (exceptionCaught == null ? null : js_Boot.getClass(exceptionCaught)) != hex_error_PrivateConstructorException) {
		hex_unittest_assertion_Assert._fail("Expected 'PrivateConstructorException' but was '" + Std.string(exceptionCaught) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.methodCallThrows = function(expectedException,scope,methodReference,args,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	var expectedExceptionType = Type.getClassName(expectedException);
	var exceptionCaught = null;
	try {
		methodReference.apply(scope,args);
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		if((e1 instanceof tink_core_TypedError)) {
			exceptionCaught = e1;
		} else {
			throw e;
		}
	}
	if(exceptionCaught == null || exceptionCaught != null && (exceptionCaught == null ? null : js_Boot.getClass(exceptionCaught)) != expectedException) {
		hex_unittest_assertion_Assert._fail("Expected '" + expectedExceptionType + "' but was '" + Std.string(exceptionCaught) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.setPropertyThrows = function(expectedException,instance,propertyName,value,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	var expectedExceptionType = Type.getClassName(expectedException);
	var exceptionCaught = null;
	try {
		Reflect.setProperty(instance,propertyName,value);
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		if((e1 instanceof tink_core_TypedError)) {
			exceptionCaught = e1;
		} else {
			throw e;
		}
	}
	if(exceptionCaught == null || exceptionCaught != null && (exceptionCaught == null ? null : js_Boot.getClass(exceptionCaught)) != expectedException) {
		hex_unittest_assertion_Assert._fail("Expected '" + expectedExceptionType + "' but was '" + Std.string(exceptionCaught) + "'",userMessage,posInfos);
	}
};
hex_unittest_assertion_Assert.fail = function(assertMessage,userMessage,posInfos) {
	if(userMessage == null) {
		userMessage = "";
	}
	hex_unittest_assertion_Assert._LOG_ASSERT(userMessage);
	hex_unittest_assertion_Assert._fail(assertMessage,userMessage,posInfos);
};
hex_unittest_assertion_Assert._logFailedAssertion = function() {
	hex_unittest_assertion_Assert._assertFailedCount++;
};
hex_unittest_assertion_Assert._fail = function(assertMessage,userMessage,posInfos) {
	throw new js__$Boot_HaxeError(new hex_unittest_error_AssertException(assertMessage + (userMessage.length < 0 ? ": " + userMessage : ""),posInfos));
};
var hex_unittest_description_ClassDescriptorUtil = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException(null,{ fileName : "hex/unittest/description/ClassDescriptorUtil.hx", lineNumber : 11, className : "hex.unittest.description.ClassDescriptorUtil", methodName : "new"}));
};
$hxClasses["hex.unittest.description.ClassDescriptorUtil"] = hex_unittest_description_ClassDescriptorUtil;
hex_unittest_description_ClassDescriptorUtil.__name__ = ["hex","unittest","description","ClassDescriptorUtil"];
hex_unittest_description_ClassDescriptorUtil.hasNextClass = function(classDescriptor) {
	return classDescriptor.classIndex < classDescriptor.classDescriptors.length;
};
hex_unittest_description_ClassDescriptorUtil.nextClass = function(classDescriptor) {
	return classDescriptor.classDescriptors[classDescriptor.classIndex++];
};
hex_unittest_description_ClassDescriptorUtil.hasNextMethod = function(classDescriptor) {
	return classDescriptor.methodIndex < classDescriptor.methodDescriptors.length;
};
hex_unittest_description_ClassDescriptorUtil.nextMethod = function(classDescriptor) {
	return classDescriptor.methodDescriptors[classDescriptor.methodIndex++];
};
hex_unittest_description_ClassDescriptorUtil.keepOnlyThisMethod = function(classDescriptor,methodName) {
	classDescriptor.methodDescriptors = classDescriptor.methodDescriptors.filter(function(descriptor) {
		return descriptor.methodName == methodName;
	});
};
hex_unittest_description_ClassDescriptorUtil.currentMethodDescriptor = function(classDescriptor) {
	return classDescriptor.methodDescriptors[classDescriptor.methodIndex == 0 ? 0 : classDescriptor.methodIndex - 1];
};
hex_unittest_description_ClassDescriptorUtil.$length = function(classDescriptor) {
	var l = 0;
	var _g = 0;
	var _g1 = classDescriptor.classDescriptors;
	while(_g < _g1.length) {
		var descriptor = _g1[_g];
		++_g;
		l = l + hex_unittest_description_ClassDescriptorUtil.$length(descriptor);
	}
	return l + classDescriptor.methodDescriptors.length;
};
hex_unittest_description_ClassDescriptorUtil.toString = function(classDescriptor) {
	return "" + Std.string(classDescriptor) + (":[" + Std.string(classDescriptor) + ".instance, " + Std.string(classDescriptor) + ".type, " + Std.string(classDescriptor) + ".className]");
};
hex_unittest_description_ClassDescriptorUtil.prototype = {
	__class__: hex_unittest_description_ClassDescriptorUtil
};
var hex_unittest_error_AssertException = function(message,posInfos) {
	tink_core_TypedError.call(this,this.code,message,this.pos);
};
$hxClasses["hex.unittest.error.AssertException"] = hex_unittest_error_AssertException;
hex_unittest_error_AssertException.__name__ = ["hex","unittest","error","AssertException"];
hex_unittest_error_AssertException.__super__ = tink_core_TypedError;
hex_unittest_error_AssertException.prototype = $extend(tink_core_TypedError.prototype,{
	__class__: hex_unittest_error_AssertException
});
var hex_unittest_error_TimeoutException = function(message,posInfos) {
	if(message == null) {
		message = "Async test timeout";
	}
	tink_core_TypedError.call(this,this.code,message,this.pos);
};
$hxClasses["hex.unittest.error.TimeoutException"] = hex_unittest_error_TimeoutException;
hex_unittest_error_TimeoutException.__name__ = ["hex","unittest","error","TimeoutException"];
hex_unittest_error_TimeoutException.__super__ = tink_core_TypedError;
hex_unittest_error_TimeoutException.prototype = $extend(tink_core_TypedError.prototype,{
	__class__: hex_unittest_error_TimeoutException
});
var hex_unittest_event_ITestClassResultListener = function() { };
$hxClasses["hex.unittest.event.ITestClassResultListener"] = hex_unittest_event_ITestClassResultListener;
hex_unittest_event_ITestClassResultListener.__name__ = ["hex","unittest","event","ITestClassResultListener"];
hex_unittest_event_ITestClassResultListener.prototype = {
	__class__: hex_unittest_event_ITestClassResultListener
};
var hex_unittest_event_ITestResultListener = function() { };
$hxClasses["hex.unittest.event.ITestResultListener"] = hex_unittest_event_ITestResultListener;
hex_unittest_event_ITestResultListener.__name__ = ["hex","unittest","event","ITestResultListener"];
hex_unittest_event_ITestResultListener.prototype = {
	__class__: hex_unittest_event_ITestResultListener
};
var hex_unittest_metadata_MetadataList = function() { };
$hxClasses["hex.unittest.metadata.MetadataList"] = hex_unittest_metadata_MetadataList;
hex_unittest_metadata_MetadataList.__name__ = ["hex","unittest","metadata","MetadataList"];
var hex_unittest_metadata_MetadataParser = function() {
};
$hxClasses["hex.unittest.metadata.MetadataParser"] = hex_unittest_metadata_MetadataParser;
hex_unittest_metadata_MetadataParser.__name__ = ["hex","unittest","metadata","MetadataParser"];
hex_unittest_metadata_MetadataParser._getClassDescriptor = function(type) {
	return { instance : Object.create(type.prototype), type : type, className : Type.getClassName(type), isSuiteClass : false, beforeClassFieldName : null, afterClassFieldName : null, setUpFieldName : null, tearDownFieldName : null, classDescriptors : [], methodDescriptors : [], classIndex : 0, methodIndex : 0, name : ""};
};
hex_unittest_metadata_MetadataParser._getMethodDescriptor = function(methodName,isAsync,isIgnored,description,dataProviderFieldName,dataProviderIndex) {
	return { methodName : methodName, isAsync : isAsync, isIgnored : isIgnored, description : description != null ? description : "", timeout : 1500, dataProviderFieldName : dataProviderFieldName, dataProviderIndex : dataProviderIndex};
};
hex_unittest_metadata_MetadataParser.prototype = {
	parse: function(type) {
		var descriptor = hex_unittest_metadata_MetadataParser._getClassDescriptor(type);
		this._parse(descriptor);
		return descriptor;
	}
	,parseMethod: function(type,methodName) {
		var descriptor = hex_unittest_metadata_MetadataParser._getClassDescriptor(type);
		this._parse(descriptor);
		hex_unittest_description_ClassDescriptorUtil.keepOnlyThisMethod(descriptor,methodName);
		return descriptor;
	}
	,_parse: function(descriptor) {
		if(!this._isSuite(descriptor)) {
			var inherintanceChain = hex_util_ClassUtil.getInheritanceChain(descriptor.type);
			var metadata = this._collectMetadata(inherintanceChain);
			this._scanTestClass(descriptor,metadata);
		}
	}
	,_isSuite: function(descriptor) {
		var isSuiteClass = false;
		var metadata = haxe_rtti_Meta.getFields(descriptor.type);
		var instance = descriptor.instance;
		var fields = Reflect.fields(metadata);
		var _g = 0;
		while(_g < fields.length) {
			var fieldName = fields[_g];
			++_g;
			var f = Reflect.field(instance,fieldName);
			if(!Reflect.isFunction(f)) {
				var metadataField = Reflect.field(metadata,fieldName);
				if(Object.prototype.hasOwnProperty.call(metadataField,"Suite")) {
					if(!isSuiteClass) {
						var metadatas = Reflect.field(metadataField,"Suite");
						descriptor.name = metadatas[0];
						isSuiteClass = descriptor.isSuiteClass = true;
						descriptor.instance = Type.createInstance(descriptor.type,[]);
					}
					var suites = Reflect.field(descriptor.instance,fieldName);
					var _g1 = 0;
					while(_g1 < suites.length) {
						var testClass = suites[_g1];
						++_g1;
						var classDescriptor = hex_unittest_metadata_MetadataParser._getClassDescriptor(testClass);
						descriptor.classDescriptors.push(classDescriptor);
						this._parse(classDescriptor);
					}
				}
			}
		}
		return isSuiteClass;
	}
	,_collectMetadata: function(inherintanceChain) {
		var meta = { };
		while(inherintanceChain.length > 0) {
			var clazz = inherintanceChain.pop();
			var newMeta = haxe_rtti_Meta.getFields(clazz);
			var markedFieldNames = Reflect.fields(newMeta);
			var _g = 0;
			while(_g < markedFieldNames.length) {
				var fieldName = markedFieldNames[_g];
				++_g;
				var recordedFieldTags = Reflect.field(meta,fieldName);
				var newFieldTags = Reflect.field(newMeta,fieldName);
				var newTagNames = Reflect.fields(newFieldTags);
				if(recordedFieldTags == null) {
					var tagsCopy = { };
					var _g1 = 0;
					while(_g1 < newTagNames.length) {
						var tagName = newTagNames[_g1];
						++_g1;
						tagsCopy[tagName] = Reflect.field(newFieldTags,tagName);
					}
					meta[fieldName] = tagsCopy;
				} else {
					var ignored = false;
					var _g11 = 0;
					while(_g11 < newTagNames.length) {
						var tagName1 = newTagNames[_g11];
						++_g11;
						if(tagName1 == "Ignore") {
							ignored = true;
						}
						if(!ignored && (tagName1 == "Test" || tagName1 == "Async") && Object.prototype.hasOwnProperty.call(recordedFieldTags,"Ignore")) {
							Reflect.deleteField(recordedFieldTags,"Ignore");
						}
						var tagValue = Reflect.field(newFieldTags,tagName1);
						recordedFieldTags[tagName1] = tagValue;
					}
				}
			}
		}
		return meta;
	}
	,_scanTestClass: function(testDescriptor,fieldMeta) {
		var fieldNames = Reflect.fields(fieldMeta);
		var _g = 0;
		while(_g < fieldNames.length) {
			var fieldName = fieldNames[_g];
			++_g;
			var f = Reflect.field(testDescriptor.instance,fieldName);
			var funcMeta = Reflect.field(fieldMeta,fieldName);
			if(Reflect.isFunction(f)) {
				this._searchForInstanceMetadata(testDescriptor,fieldName,f,funcMeta);
			}
		}
		this._searchForStaticMetadata(testDescriptor);
	}
	,_searchForStaticMetadata: function(testDescriptor) {
		var staticMetadata = haxe_rtti_Meta.getStatics(testDescriptor.type);
		var fields = Reflect.fields(staticMetadata);
		var _g = 0;
		while(_g < fields.length) {
			var fieldName = fields[_g];
			++_g;
			var field = Reflect.field(staticMetadata,fieldName);
			if(Object.prototype.hasOwnProperty.call(field,"BeforeClass")) {
				testDescriptor.beforeClassFieldName = fieldName;
			}
			if(Object.prototype.hasOwnProperty.call(field,"AfterClass")) {
				testDescriptor.afterClassFieldName = fieldName;
			}
		}
	}
	,_searchForInstanceMetadata: function(testDescriptor,fieldName,func,funcMeta) {
		var _g = 0;
		var _g1 = hex_unittest_metadata_MetadataList.INSTANCE_METADATA;
		_hx_loop1: while(_g < _g1.length) {
			var tag = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(funcMeta,tag)) {
				var args = Reflect.field(funcMeta,tag);
				var description = args != null ? args[0] : "";
				var isIgnored = Object.prototype.hasOwnProperty.call(funcMeta,"Ignore");
				if(isIgnored) {
					args = Reflect.field(funcMeta,"Ignore");
					description = args != null ? args[0] : "";
				}
				var isDataDriven = Object.prototype.hasOwnProperty.call(funcMeta,"DataProvider");
				var dataProvider = null;
				var dataProviderFieldName = "";
				if(isDataDriven) {
					args = Reflect.field(funcMeta,"DataProvider");
					dataProviderFieldName = args != null ? args[0] : "";
				}
				switch(tag) {
				case "After":
					testDescriptor.tearDownFieldName = fieldName;
					break _hx_loop1;
				case "AfterClass":
					testDescriptor.afterClassFieldName = fieldName;
					break _hx_loop1;
				case "Async":
					var hasTimeout = Object.prototype.hasOwnProperty.call(funcMeta,"Timeout");
					var timeout = hasTimeout ? Reflect.field(funcMeta,"Timeout")[0] : 1500;
					this._addTestToDescriptor(testDescriptor,fieldName,true,isIgnored,description,timeout,dataProviderFieldName);
					break;
				case "Before":
					testDescriptor.setUpFieldName = fieldName;
					break _hx_loop1;
				case "BeforeClass":
					testDescriptor.beforeClassFieldName = fieldName;
					break _hx_loop1;
				case "Test":
					this._addTestToDescriptor(testDescriptor,fieldName,false,isIgnored,description,0,dataProviderFieldName);
					break _hx_loop1;
				}
			}
		}
	}
	,_addTestToDescriptor: function(testDescriptor,fieldName,isAsync,isIgnored,description,timeout,dataProviderFieldName) {
		if(dataProviderFieldName != "") {
			var length = 0;
			try {
				length = Reflect.field(testDescriptor.type,dataProviderFieldName).length;
			} catch( e ) {
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				throw new js__$Boot_HaxeError(new hex_error_NoSuchElementException("Class " + testDescriptor.className + " is missing dataProvider '" + dataProviderFieldName + "' for method '" + fieldName + "'",{ fileName : "hex/unittest/metadata/MetadataParser.hx", lineNumber : 245, className : "hex.unittest.metadata.MetadataParser", methodName : "_addTestToDescriptor"}));
			}
			var _g1 = 0;
			var _g = length;
			while(_g1 < _g) {
				var dataProviderIndex = _g1++;
				testDescriptor.methodDescriptors.push(hex_unittest_metadata_MetadataParser._getMethodDescriptor(fieldName,isAsync,isIgnored,description,dataProviderFieldName,dataProviderIndex));
			}
		} else {
			testDescriptor.methodDescriptors.push(hex_unittest_metadata_MetadataParser._getMethodDescriptor(fieldName,isAsync,isIgnored,description,dataProviderFieldName,0));
		}
	}
	,__class__: hex_unittest_metadata_MetadataParser
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if((o instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g11 = 0;
			var _g3 = l;
			while(_g11 < _g3) {
				var i1 = _g11++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if((o instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if((o instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return $hxEnums[o.__enum__] == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var hex_unittest_notifier_BrowserUnitTestNotifier = function(targetId) {
	this._failedCount = 0;
	this._successfulCount = 0;
	this._assertionStartCount = 0;
	this._tabs = 0;
	this.setConsole(targetId);
	this.setGlobalResultSuccess();
};
$hxClasses["hex.unittest.notifier.BrowserUnitTestNotifier"] = hex_unittest_notifier_BrowserUnitTestNotifier;
hex_unittest_notifier_BrowserUnitTestNotifier.__name__ = ["hex","unittest","notifier","BrowserUnitTestNotifier"];
hex_unittest_notifier_BrowserUnitTestNotifier.__interfaces__ = [hex_unittest_event_ITestClassResultListener];
hex_unittest_notifier_BrowserUnitTestNotifier.prototype = {
	setConsole: function(targetId) {
		if(targetId != null) {
			this.console = window.document.getElementById(targetId);
			if(this.console == null) {
				throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("'" + targetId + "' div not found",{ fileName : "hex/unittest/notifier/BrowserUnitTestNotifier.hx", lineNumber : 49, className : "hex.unittest.notifier.BrowserUnitTestNotifier", methodName : "setConsole"}));
			}
		} else {
			this.console = window.document.createElement("div");
			window.document.body.appendChild(this.console);
		}
		this.console.style.backgroundColor = "#060606";
		this.console.style.whiteSpace = "pre";
		this.console.style.fontFamily = "Lucida Console";
		this.console.style.position = "relative";
		this.console.style.fontSize = "11px";
		this.console.style.overflowY = "scroll";
		this.console.style.height = "100vh";
		this.console.style.padding = "15px";
	}
	,_log: function(element) {
		element.style.marginLeft = this._tabs * 30 + "px";
		element.appendChild(window.document.createTextNode("\n"));
		this.console.appendChild(element);
		this.console.scrollTop = this.console.scrollHeight;
	}
	,_addTab: function() {
		this._tabs++;
	}
	,_removeTab: function() {
		this._tabs--;
	}
	,onStartRun: function(descriptor) {
		this._assertionStartCount = hex_unittest_assertion_Assert.getAssertionCount();
		this._successfulCount = 0;
		this._failedCount = 0;
		this._tabs = 0;
		this._log(this.createElement("[[[ Start " + descriptor.className + " tests run ]]]","yellow+bold+h3"));
		this._addTab();
		this.netTimeElapsed = 0;
	}
	,onEndRun: function(descriptor) {
		this._removeTab();
		var assertionCount = hex_unittest_assertion_Assert.getAssertionCount() - this._assertionStartCount;
		var assertionMessage = _$UInt_UInt_$Impl_$.gt(assertionCount,1) ? Std.string(_$UInt_UInt_$Impl_$.toFloat(assertionCount)) + " assertions runned" : Std.string(_$UInt_UInt_$Impl_$.toFloat(assertionCount)) + " assertions runned";
		var beginning = this.createElement("[[[ Test runs finished :: ","yellow+bold+h3");
		var all = this.createElement(Std.string(_$UInt_UInt_$Impl_$.toFloat(this._successfulCount + this._failedCount)) + " overall :: ","white+bold+h3");
		var successfull = this.createElement(Std.string(_$UInt_UInt_$Impl_$.toFloat(this._successfulCount)) + " successul :: ","green+bold+h3");
		var failed = this.createElement(Std.string(_$UInt_UInt_$Impl_$.toFloat(this._failedCount)) + " failed :: ","red+bold+h3");
		var assertion = this.createElement(assertionMessage + "  :: ","white+bold+h3");
		var ending = this.createElement(" in " + this.netTimeElapsed + "ms :: ]]]","yellow+bold+h3");
		var list = [];
		list.push(beginning);
		list.push(all);
		if(_$UInt_UInt_$Impl_$.gt(this._successfulCount,0)) {
			list.push(successfull);
		}
		if(_$UInt_UInt_$Impl_$.gt(this._failedCount,0)) {
			list.push(failed);
		}
		list.push(assertion);
		list.push(ending);
		this._log(this.encapsulateElements(list));
		this.addRuler();
	}
	,onSuiteClassStartRun: function(descriptor) {
		this._log(this.createElement(descriptor.name + ": '" + descriptor.className + "'","white+bold+h4"));
		this._addTab();
	}
	,onSuiteClassEndRun: function(descriptor) {
		this._removeTab();
	}
	,onTestClassStartRun: function(descriptor) {
		this._log(this.createElement("Test class: '" + descriptor.className + "'","darkwhite+h5+bold"));
		this._addTab();
	}
	,onTestClassEndRun: function(descriptor) {
		this._removeTab();
	}
	,onSuccess: function(descriptor,timeElapsed) {
		this._successfulCount++;
		var success = this.createElement("✔ ","green");
		var methodDescriptor = hex_unittest_description_ClassDescriptorUtil.currentMethodDescriptor(descriptor);
		var func = this.createElement(methodDescriptor.methodName + "() ","lightgrey");
		this.generateMessage(success,func,descriptor,timeElapsed);
	}
	,onFail: function(descriptor,timeElapsed,error) {
		this._failedCount++;
		var methodDescriptor = hex_unittest_description_ClassDescriptorUtil.currentMethodDescriptor(descriptor);
		var func = this.createElement(methodDescriptor.methodName + "() ","red");
		var fail = this.createElement("✘ ","red");
		this.generateMessage(fail,func,descriptor,timeElapsed);
		this._addTab();
		this._addTab();
		this._log(this.createElement(error.toString(),"red+bold"));
		this._log(this.createElement(error.message + ((error instanceof hex_unittest_error_AssertException) ? ": " + hex_unittest_assertion_Assert.getLastAssertionLog() : ""),"red"));
		this._removeTab();
		this._removeTab();
		this.setGlobalResultFailed();
	}
	,onTimeout: function(descriptor,timeElapsed,error) {
		this.onFail(descriptor,timeElapsed,error);
	}
	,onIgnore: function(descriptor) {
		this._successfulCount++;
		var ignore = this.createElement("- ","yellow");
		var methodDescriptor = hex_unittest_description_ClassDescriptorUtil.currentMethodDescriptor(descriptor);
		var func = this.createElement(methodDescriptor.methodName + "() ","lightgrey");
		this.generateMessage(ignore,func,descriptor,0);
	}
	,generateMessage: function(icon,func,descriptor,timeElapsed) {
		var description = hex_unittest_description_ClassDescriptorUtil.currentMethodDescriptor(descriptor).description;
		var message = this.createElement((description.length > 0 ? description : "") + " [" + timeElapsed + "ms]","darkgrey");
		this.netTimeElapsed += timeElapsed;
		this._log(this.encapsulateElements([icon,func,message]));
	}
	,createElement: function(message,color) {
		var result = "";
		var span = window.document.createElement("span");
		span.textContent = message;
		this.setAttributes(span,color);
		return span;
	}
	,encapsulateElements: function(elementList) {
		var container = window.document.createElement("span");
		var _g = 0;
		while(_g < elementList.length) {
			var element = elementList[_g];
			++_g;
			container.appendChild(element);
		}
		return container;
	}
	,setAttributes: function(element,color) {
		var colorAttributes = color.split("+");
		var _g = 0;
		while(_g < colorAttributes.length) {
			var attr = colorAttributes[_g];
			++_g;
			this.setAttribute(element,attr);
		}
	}
	,setAttribute: function(element,attr) {
		switch(attr) {
		case "blue":
			element.style.color = "#4999d4";
			break;
		case "bold":
			element.style.fontWeight = "bold";
			break;
		case "darkgrey":
			element.style.color = "#727272";
			break;
		case "darkwhite":
			element.style.color = "#e6e6e6";
			break;
		case "green":
			element.style.color = "#27fe11";
			break;
		case "h3":
			element.style.fontSize = "14px";
			element.style.lineHeight = "30px";
			break;
		case "h4":
			element.style.fontSize = "13px";
			element.style.lineHeight = "30px";
			break;
		case "h5":
			element.style.lineHeight = "25px";
			break;
		case "italic":
			element.style.fontStyle = "italic";
			break;
		case "lightgrey":
			element.style.color = "#d9d9d9";
			break;
		case "red":
			element.style.color = "#e62323";
			break;
		case "underline":
			element.style.textDecoration = "underline";
			break;
		case "white":
			element.style.color = "#e2e2e2";
			break;
		case "yellow":
			element.style.color = "#ffcf18";
			break;
		}
	}
	,setGlobalResultSuccess: function() {
		this.console.style.borderLeft = "50px solid #2f8a11";
	}
	,setGlobalResultFailed: function() {
		this.console.style.borderLeft = "50px solid #e62323";
	}
	,addRuler: function() {
		var ruler = window.document.createElement("hr");
		ruler.style.border = "0";
		ruler.style.height = "10px";
		ruler.style.borderTop = "1px solid #555";
		ruler.style.margin = "15px 0px 15px 0px";
		this.console.appendChild(ruler);
	}
	,__class__: hex_unittest_notifier_BrowserUnitTestNotifier
};
var hex_unittest_notifier_ExitingNotifier = function() {
};
$hxClasses["hex.unittest.notifier.ExitingNotifier"] = hex_unittest_notifier_ExitingNotifier;
hex_unittest_notifier_ExitingNotifier.__name__ = ["hex","unittest","notifier","ExitingNotifier"];
hex_unittest_notifier_ExitingNotifier.__interfaces__ = [hex_unittest_event_ITestClassResultListener];
hex_unittest_notifier_ExitingNotifier.prototype = {
	onStartRun: function(descriptor) {
	}
	,onEndRun: function(descriptor) {
		if(hex_unittest_assertion_Assert.getAssertionFailedCount() > 0) {
			throw new js__$Boot_HaxeError(new tink_core_TypedError(null,"Assertions failed: " + hex_unittest_assertion_Assert.getAssertionFailedCount(),{ fileName : "hex/unittest/notifier/ExitingNotifier.hx", lineNumber : 25, className : "hex.unittest.notifier.ExitingNotifier", methodName : "onEndRun"}));
		}
	}
	,onSuiteClassStartRun: function(descriptor) {
	}
	,onSuiteClassEndRun: function(descriptor) {
	}
	,onTestClassStartRun: function(descriptor) {
	}
	,onTestClassEndRun: function(descriptor) {
	}
	,onSuccess: function(descriptor,timeElapsed) {
	}
	,onFail: function(descriptor,timeElapsed,error) {
	}
	,onTimeout: function(descriptor,timeElapsed,error) {
	}
	,onIgnore: function(descriptor) {
	}
	,__class__: hex_unittest_notifier_ExitingNotifier
};
var hex_unittest_runner_ExMachinaUnitCore = function() {
	this.dispatcher = new hex_unittest_runner_UnitCoreTrigger();
	this._parser = new hex_unittest_metadata_MetadataParser();
	this._classDescriptors = [];
};
$hxClasses["hex.unittest.runner.ExMachinaUnitCore"] = hex_unittest_runner_ExMachinaUnitCore;
hex_unittest_runner_ExMachinaUnitCore.__name__ = ["hex","unittest","runner","ExMachinaUnitCore"];
hex_unittest_runner_ExMachinaUnitCore.__interfaces__ = [hex_unittest_event_ITestClassResultListener];
hex_unittest_runner_ExMachinaUnitCore.prototype = {
	run: function() {
		this._currentClassDescriptor = 0;
		hex_unittest_assertion_Assert.resetAssertionLog();
		if(this._classDescriptors.length > 0) {
			this._runNext();
		}
	}
	,getTestLength: function() {
		var length = 0;
		var _g = 0;
		var _g1 = this._classDescriptors;
		while(_g < _g1.length) {
			var classDescriptor = _g1[_g];
			++_g;
			length = length + hex_unittest_description_ClassDescriptorUtil.$length(classDescriptor);
		}
		return length;
	}
	,addRuntimeTest: function(testableClass) {
		this._classDescriptors.push(this._parser.parse(testableClass));
	}
	,addDescriptor: function(classDescriptor) {
		this._classDescriptors.push(classDescriptor);
	}
	,addTestMethod: function(testableClass,methodName) {
		this._classDescriptors.push(this._parser.parseMethod(testableClass,methodName));
	}
	,addListener: function(listener) {
		return this.dispatcher.connect(listener);
	}
	,removeListener: function(listener) {
		return this.dispatcher.disconnect(listener);
	}
	,onStartRun: function(descriptor) {
		this.dispatcher.onStartRun(descriptor);
	}
	,onEndRun: function(descriptor) {
		this.dispatcher.onEndRun(descriptor);
		if(this._hasNextClassDescriptor()) {
			hex_unittest_assertion_Assert.resetAssertionLog();
			this._runner.removeListener(this);
			this._runNext();
		} else {
			hex_unittest_assertion_Assert.resetAssertionLog();
		}
	}
	,onSuiteClassStartRun: function(descriptor) {
		this.dispatcher.onSuiteClassStartRun(descriptor);
	}
	,onSuiteClassEndRun: function(descriptor) {
		this.dispatcher.onSuiteClassEndRun(descriptor);
	}
	,onTestClassStartRun: function(descriptor) {
		this.dispatcher.onTestClassStartRun(descriptor);
	}
	,onTestClassEndRun: function(descriptor) {
		this.dispatcher.onTestClassEndRun(descriptor);
	}
	,onSuccess: function(descriptor,timeElapsed) {
		this.dispatcher.onSuccess(descriptor,timeElapsed);
	}
	,onFail: function(descriptor,timeElapsed,error) {
		this.dispatcher.onFail(descriptor,timeElapsed,error);
	}
	,onTimeout: function(descriptor,timeElapsed,error) {
		this.dispatcher.onTimeout(descriptor,timeElapsed,error);
	}
	,onIgnore: function(descriptor) {
		this.dispatcher.onIgnore(descriptor);
	}
	,_runNext: function() {
		this._runner = new hex_unittest_runner_TestRunner(this._nextClassDescriptor());
		this._runner.addListener(this);
		this._runner.run();
	}
	,_nextClassDescriptor: function() {
		return this._classDescriptors[this._currentClassDescriptor++];
	}
	,_hasNextClassDescriptor: function() {
		return this._currentClassDescriptor < this._classDescriptors.length;
	}
	,__class__: hex_unittest_runner_ExMachinaUnitCore
};
var hex_unittest_runner_UnitCoreTrigger = function() {
	this._inputs = [];
};
$hxClasses["hex.unittest.runner.UnitCoreTrigger"] = hex_unittest_runner_UnitCoreTrigger;
hex_unittest_runner_UnitCoreTrigger.__name__ = ["hex","unittest","runner","UnitCoreTrigger"];
hex_unittest_runner_UnitCoreTrigger.__interfaces__ = [hex_unittest_event_ITestClassResultListener];
hex_unittest_runner_UnitCoreTrigger.prototype = {
	connect: function(input) {
		if(this._inputs.indexOf(input) == -1) {
			this._inputs.push(input);
			return true;
		} else {
			return false;
		}
	}
	,disconnect: function(input) {
		var index = this._inputs.indexOf(input);
		if(index > -1) {
			this._inputs.splice(index,1);
			return true;
		} else {
			return false;
		}
	}
	,disconnectAll: function() {
		this._inputs = [];
	}
	,onStartRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onStartRun(descriptor);
		}
	}
	,onEndRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onEndRun(descriptor);
		}
	}
	,onSuiteClassStartRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onSuiteClassStartRun(descriptor);
		}
	}
	,onSuiteClassEndRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onSuiteClassEndRun(descriptor);
		}
	}
	,onTestClassStartRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onTestClassStartRun(descriptor);
		}
	}
	,onTestClassEndRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onTestClassEndRun(descriptor);
		}
	}
	,onSuccess: function(descriptor,timeElapsed) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onSuccess(descriptor,timeElapsed);
		}
	}
	,onFail: function(descriptor,timeElapsed,error) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onFail(descriptor,timeElapsed,error);
		}
	}
	,onTimeout: function(descriptor,timeElapsed,error) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onTimeout(descriptor,timeElapsed,error);
		}
	}
	,onIgnore: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onIgnore(descriptor);
		}
	}
	,__class__: hex_unittest_runner_UnitCoreTrigger
};
var hex_unittest_runner_IRunner = function() { };
$hxClasses["hex.unittest.runner.IRunner"] = hex_unittest_runner_IRunner;
hex_unittest_runner_IRunner.__name__ = ["hex","unittest","runner","IRunner"];
hex_unittest_runner_IRunner.prototype = {
	__class__: hex_unittest_runner_IRunner
};
var hex_unittest_runner_ITestRunner = function() { };
$hxClasses["hex.unittest.runner.ITestRunner"] = hex_unittest_runner_ITestRunner;
hex_unittest_runner_ITestRunner.__name__ = ["hex","unittest","runner","ITestRunner"];
hex_unittest_runner_ITestRunner.__interfaces__ = [hex_unittest_runner_IRunner];
hex_unittest_runner_ITestRunner.prototype = {
	__class__: hex_unittest_runner_ITestRunner
};
var hex_unittest_runner_MethodRunner = function(scope,methodDescriptor,classType) {
	this._trigger = new hex_unittest_runner_Trigger();
	this._scope = scope;
	this._methodReference = Reflect.field(this._scope,methodDescriptor.methodName);
	this._methodDescriptor = methodDescriptor;
	this._classType = classType;
	this._functionCall = methodDescriptor.functionCall;
};
$hxClasses["hex.unittest.runner.MethodRunner"] = hex_unittest_runner_MethodRunner;
hex_unittest_runner_MethodRunner.__name__ = ["hex","unittest","runner","MethodRunner"];
hex_unittest_runner_MethodRunner.asyncHandler = function(closure) {
	var methodRunner = hex_unittest_runner_MethodRunner._CURRENT_RUNNER;
	if(methodRunner == null) {
		throw new js__$Boot_HaxeError(new hex_error_IllegalStateException("AsyncHandler has been called after '@Async' test was released. Try to remove all your listeners in '@After' method to fix this error",{ fileName : "hex/unittest/runner/MethodRunner.hx", lineNumber : 165, className : "hex.unittest.runner.MethodRunner", methodName : "asyncHandler"}));
	}
	try {
		closure();
		methodRunner._timer.stop();
		methodRunner._timer = null;
		hex_unittest_runner_MethodRunner._CURRENT_RUNNER = null;
		methodRunner._notifySuccess();
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		methodRunner._timer.stop();
		methodRunner._timer = null;
		hex_unittest_runner_MethodRunner._CURRENT_RUNNER = null;
		methodRunner._notifyError(e1);
	}
};
hex_unittest_runner_MethodRunner.registerAsyncMethodRunner = function(runner) {
	if(hex_unittest_runner_MethodRunner._CURRENT_RUNNER == null) {
		hex_unittest_runner_MethodRunner._CURRENT_RUNNER = runner;
	} else {
		throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("MethodRunner.registerAsyncMethodRunner fails. '" + Std.string(hex_unittest_runner_MethodRunner._CURRENT_RUNNER) + "' was already registered.",{ fileName : "hex/unittest/runner/MethodRunner.hx", lineNumber : 195, className : "hex.unittest.runner.MethodRunner", methodName : "registerAsyncMethodRunner"}));
	}
};
hex_unittest_runner_MethodRunner._fireTimeout = function() {
	var methodRunner = hex_unittest_runner_MethodRunner._CURRENT_RUNNER;
	methodRunner._timer.stop();
	hex_unittest_runner_MethodRunner._CURRENT_RUNNER = null;
	hex_unittest_assertion_Assert._logFailedAssertion();
	methodRunner._trigger.onTimeout(new Date().getTime() - methodRunner._startTime);
};
hex_unittest_runner_MethodRunner.prototype = {
	run: function() {
		this._startTime = new Date().getTime();
		if(this._methodDescriptor.isIgnored) {
			this._trigger.onIgnore(new Date().getTime() - this._startTime);
			return;
		}
		var dataProvider = this._methodDescriptor.dataProviderFieldName != "" ? Reflect.field(this._classType,this._methodDescriptor.dataProviderFieldName) : [];
		if(!this._methodDescriptor.isAsync) {
			try {
				if(this._functionCall != null) {
					this._functionCall(this._scope);
				} else {
					this._methodReference.apply(this._scope,dataProvider.length > 0 ? [dataProvider[this._methodDescriptor.dataProviderIndex]] : []);
				}
				this._notifySuccess();
			} catch( err ) {
				this._notifyError((err instanceof js__$Boot_HaxeError) ? err.val : err);
			}
		} else {
			if(this._timer != null) {
				this._timer.stop();
			}
			this._timer = new haxe_Timer(this._methodDescriptor.timeout);
			this._timer.run = hex_unittest_runner_MethodRunner._fireTimeout;
			try {
				hex_unittest_runner_MethodRunner.registerAsyncMethodRunner(this);
			} catch( e ) {
				var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
				if((e1 instanceof hex_error_IllegalArgumentException)) {
					this._trigger.onFail(new Date().getTime() - this._startTime,e1);
					return;
				} else {
					throw e;
				}
			}
			try {
				if(this._functionCall != null) {
					this._functionCall(this._scope);
				} else {
					this._methodReference.apply(this._scope,dataProvider.length > 0 ? [dataProvider[this._methodDescriptor.dataProviderIndex]] : []);
				}
			} catch( err1 ) {
				var err2 = (err1 instanceof js__$Boot_HaxeError) ? err1.val : err1;
				this._timer.stop();
				hex_unittest_runner_MethodRunner._CURRENT_RUNNER = null;
				this._notifyError(err2);
			}
		}
	}
	,_notifySuccess: function() {
		this._trigger.onSuccess(new Date().getTime() - this._startTime);
	}
	,_notifyError: function(e) {
		if(!(e instanceof tink_core_TypedError)) {
			var err = null;
			err = new tink_core_TypedError(e.toString(),e.posInfos,{ fileName : "hex/unittest/runner/MethodRunner.hx", lineNumber : 127, className : "hex.unittest.runner.MethodRunner", methodName : "_notifyError"});
			hex_unittest_assertion_Assert._logFailedAssertion();
			this._trigger.onFail(new Date().getTime() - this._startTime,err);
		} else {
			hex_unittest_assertion_Assert._logFailedAssertion();
			this._trigger.onFail(new Date().getTime() - this._startTime,e);
		}
	}
	,addListener: function(listener) {
		return this._trigger.connect(listener);
	}
	,removeListener: function(listener) {
		return this._trigger.disconnect(listener);
	}
	,getDescriptor: function() {
		return this._methodDescriptor;
	}
	,__class__: hex_unittest_runner_MethodRunner
};
var hex_unittest_runner_Trigger = function() {
	this._inputs = [];
};
$hxClasses["hex.unittest.runner.Trigger"] = hex_unittest_runner_Trigger;
hex_unittest_runner_Trigger.__name__ = ["hex","unittest","runner","Trigger"];
hex_unittest_runner_Trigger.__interfaces__ = [hex_unittest_event_ITestResultListener];
hex_unittest_runner_Trigger.prototype = {
	connect: function(input) {
		if(this._inputs.indexOf(input) == -1) {
			this._inputs.push(input);
			return true;
		} else {
			return false;
		}
	}
	,disconnect: function(input) {
		var index = this._inputs.indexOf(input);
		if(index > -1) {
			this._inputs.splice(index,1);
			return true;
		} else {
			return false;
		}
	}
	,disconnectAll: function() {
		this._inputs = [];
	}
	,onSuccess: function(timeElapsed) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onSuccess(timeElapsed);
		}
	}
	,onFail: function(timeElapsed,error) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onFail(timeElapsed,error);
		}
	}
	,onTimeout: function(timeElapsed) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onTimeout(timeElapsed);
		}
	}
	,onIgnore: function(timeElapsed) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onIgnore(timeElapsed);
		}
	}
	,__class__: hex_unittest_runner_Trigger
};
var hex_unittest_runner_TestRunner = function(classDescriptor) {
	this.dispatcher = new hex_unittest_runner_TestRunnerTrigger();
	this._lastRender = 0;
	this._classDescriptors = new haxe_ds_GenericStack();
	this._executedDescriptors = new hex_collection_HashMap();
	var _this = this._classDescriptors;
	_this.head = new haxe_ds_GenericCell(classDescriptor,_this.head);
};
$hxClasses["hex.unittest.runner.TestRunner"] = hex_unittest_runner_TestRunner;
hex_unittest_runner_TestRunner.__name__ = ["hex","unittest","runner","TestRunner"];
hex_unittest_runner_TestRunner.__interfaces__ = [hex_unittest_event_ITestResultListener,hex_unittest_runner_ITestRunner];
hex_unittest_runner_TestRunner.prototype = {
	run: function() {
		var _this = this._classDescriptors;
		var classDescriptor = _this.head == null ? null : _this.head.elt;
		this.dispatcher.onStartRun(classDescriptor);
		var _this1 = this._classDescriptors;
		this._runClassDescriptor(_this1.head == null ? null : _this1.head.elt);
	}
	,_runClassDescriptor: function(classDescriptor) {
		if(classDescriptor != null) {
			if(classDescriptor.isSuiteClass) {
				if(!this._executedDescriptors.containsKey(classDescriptor)) {
					this.dispatcher.onSuiteClassStartRun(classDescriptor);
					this._executedDescriptors.put(classDescriptor,true);
				}
				this._runSuiteClass(classDescriptor);
			} else {
				if(!this._executedDescriptors.containsKey(classDescriptor)) {
					this.dispatcher.onTestClassStartRun(classDescriptor);
					this._executedDescriptors.put(classDescriptor,true);
				}
				this._tryToRunBeforeClass(classDescriptor);
				this._runTestClass(classDescriptor);
			}
		} else {
			this.dispatcher.onEndRun(classDescriptor);
		}
	}
	,_runSuiteClass: function(classDescriptor) {
		if(hex_unittest_description_ClassDescriptorUtil.hasNextClass(classDescriptor)) {
			classDescriptor = hex_unittest_description_ClassDescriptorUtil.nextClass(classDescriptor);
			var _this = this._classDescriptors;
			_this.head = new haxe_ds_GenericCell(classDescriptor,_this.head);
			this._runClassDescriptor(classDescriptor);
		} else {
			this.dispatcher.onSuiteClassEndRun(classDescriptor);
			var _this1 = this._classDescriptors;
			var k = _this1.head;
			if(k != null) {
				_this1.head = k.next;
			}
			var _this2 = this._classDescriptors;
			this._runClassDescriptor(_this2.head == null ? null : _this2.head.elt);
		}
	}
	,_runTestClass: function(classDescriptor) {
		if(hex_unittest_description_ClassDescriptorUtil.hasNextMethod(classDescriptor)) {
			classDescriptor.instance = classDescriptor.instanceCall != null ? classDescriptor.instanceCall() : Object.create(classDescriptor.type.prototype);
			this._tryToRunSetUp(classDescriptor);
			var methodRunner = new hex_unittest_runner_MethodRunner(classDescriptor.instance,hex_unittest_description_ClassDescriptorUtil.nextMethod(classDescriptor),classDescriptor.type);
			methodRunner.addListener(this);
			methodRunner.run();
		} else {
			this.dispatcher.onTestClassEndRun(classDescriptor);
			this._tryToRunAfterClass(classDescriptor);
			var _this = this._classDescriptors;
			var k = _this.head;
			if(k != null) {
				_this.head = k.next;
			}
			var _this1 = this._classDescriptors;
			this._runClassDescriptor(_this1.head == null ? null : _this1.head.elt);
		}
	}
	,_tryToRunSetUp: function(classDescriptor) {
		if(classDescriptor.setUpCall != null) {
			classDescriptor.setUpCall(classDescriptor.instance);
		} else if(classDescriptor.setUpFieldName != null) {
			Reflect.field(classDescriptor.instance,classDescriptor.setUpFieldName).apply(classDescriptor.instance,[]);
		}
	}
	,_tryToRunTearDown: function(classDescriptor) {
		if(classDescriptor.tearDownCall != null) {
			classDescriptor.tearDownCall(classDescriptor.instance);
		} else if(classDescriptor.tearDownFieldName != null) {
			Reflect.field(classDescriptor.instance,classDescriptor.tearDownFieldName).apply(classDescriptor.instance,[]);
		}
	}
	,_tryToRunBeforeClass: function(classDescriptor) {
		if(classDescriptor.beforeCall != null) {
			classDescriptor.beforeCall();
		} else if(classDescriptor.beforeClassFieldName != null) {
			Reflect.field(null,classDescriptor.beforeClassFieldName).apply(classDescriptor.type,[]);
		}
	}
	,_tryToRunAfterClass: function(classDescriptor) {
		if(classDescriptor.afterCall != null) {
			classDescriptor.afterCall();
		} else if(classDescriptor.afterClassFieldName != null) {
			Reflect.field(null,classDescriptor.afterClassFieldName).apply(classDescriptor.type,[]);
		}
	}
	,addListener: function(listener) {
		return this.dispatcher.connect(listener);
	}
	,removeListener: function(listener) {
		return this.dispatcher.disconnect(listener);
	}
	,onSuccess: function(timeElapsed) {
		var _this = this._classDescriptors;
		var classDescriptor = _this.head == null ? null : _this.head.elt;
		this.dispatcher.onSuccess(classDescriptor,timeElapsed);
		this._endTestMethodCall(classDescriptor);
	}
	,onFail: function(timeElapsed,error) {
		var _this = this._classDescriptors;
		var classDescriptor = _this.head == null ? null : _this.head.elt;
		this.dispatcher.onFail(classDescriptor,timeElapsed,error);
		this._endTestMethodCall(classDescriptor);
	}
	,onTimeout: function(timeElapsed) {
		var _this = this._classDescriptors;
		var classDescriptor = _this.head == null ? null : _this.head.elt;
		this.dispatcher.onTimeout(classDescriptor,timeElapsed,new hex_unittest_error_TimeoutException(null,{ fileName : "hex/unittest/runner/TestRunner.hx", lineNumber : 195, className : "hex.unittest.runner.TestRunner", methodName : "onTimeout"}));
		this._endTestMethodCall(classDescriptor);
	}
	,onIgnore: function(timeElapsed) {
		var _this = this._classDescriptors;
		var classDescriptor = _this.head == null ? null : _this.head.elt;
		this.dispatcher.onIgnore(classDescriptor);
		this._endTestMethodCall(classDescriptor);
	}
	,_endTestMethodCall: function(classDescriptor) {
		var _gthis = this;
		this._tryToRunTearDown(classDescriptor);
		if(hex_unittest_runner_TestRunner.RENDER_DELAY > 0 && new Date().getTime() - this._lastRender > hex_unittest_runner_TestRunner.RENDER_DELAY) {
			this._lastRender = new Date().getTime() + 1;
			haxe_Timer.delay(function() {
				_gthis._runTestClass(classDescriptor);
			},1);
		} else {
			this._lastRender = new Date().getTime() + hex_unittest_runner_TestRunner.RENDER_DELAY;
			haxe_Timer.delay(function() {
				_gthis._runTestClass(classDescriptor);
			},hex_unittest_runner_TestRunner.RENDER_DELAY);
		}
	}
	,__class__: hex_unittest_runner_TestRunner
};
var hex_unittest_runner_TestRunnerTrigger = function() {
	this._inputs = [];
};
$hxClasses["hex.unittest.runner.TestRunnerTrigger"] = hex_unittest_runner_TestRunnerTrigger;
hex_unittest_runner_TestRunnerTrigger.__name__ = ["hex","unittest","runner","TestRunnerTrigger"];
hex_unittest_runner_TestRunnerTrigger.__interfaces__ = [hex_unittest_event_ITestClassResultListener];
hex_unittest_runner_TestRunnerTrigger.prototype = {
	connect: function(input) {
		if(this._inputs.indexOf(input) == -1) {
			this._inputs.push(input);
			return true;
		} else {
			return false;
		}
	}
	,disconnect: function(input) {
		var index = this._inputs.indexOf(input);
		if(index > -1) {
			this._inputs.splice(index,1);
			return true;
		} else {
			return false;
		}
	}
	,disconnectAll: function() {
		this._inputs = [];
	}
	,onStartRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onStartRun(descriptor);
		}
	}
	,onEndRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onEndRun(descriptor);
		}
	}
	,onSuiteClassStartRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onSuiteClassStartRun(descriptor);
		}
	}
	,onSuiteClassEndRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onSuiteClassEndRun(descriptor);
		}
	}
	,onTestClassStartRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onTestClassStartRun(descriptor);
		}
	}
	,onTestClassEndRun: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onTestClassEndRun(descriptor);
		}
	}
	,onSuccess: function(descriptor,timeElapsed) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onSuccess(descriptor,timeElapsed);
		}
	}
	,onFail: function(descriptor,timeElapsed,error) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onFail(descriptor,timeElapsed,error);
		}
	}
	,onTimeout: function(descriptor,timeElapsed,error) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onTimeout(descriptor,timeElapsed,error);
		}
	}
	,onIgnore: function(descriptor) {
		var inputs = this._inputs.slice();
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			input.onIgnore(descriptor);
		}
	}
	,__class__: hex_unittest_runner_TestRunnerTrigger
};
var hex_util_ArrayUtil = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException(null,{ fileName : "hex/util/ArrayUtil.hx", lineNumber : 11, className : "hex.util.ArrayUtil", methodName : "new"}));
};
$hxClasses["hex.util.ArrayUtil"] = hex_util_ArrayUtil;
hex_util_ArrayUtil.__name__ = ["hex","util","ArrayUtil"];
hex_util_ArrayUtil.indexOf = function(a,element) {
	return a.indexOf(element);
};
hex_util_ArrayUtil.prototype = {
	__class__: hex_util_ArrayUtil
};
var hex_util_ClassUtil = function() {
	throw new js__$Boot_HaxeError(new hex_error_PrivateConstructorException(null,{ fileName : "hex/util/ClassUtil.hx", lineNumber : 15, className : "hex.util.ClassUtil", methodName : "new"}));
};
$hxClasses["hex.util.ClassUtil"] = hex_util_ClassUtil;
hex_util_ClassUtil.__name__ = ["hex","util","ClassUtil"];
hex_util_ClassUtil.getInheritanceChain = function(clazz) {
	var inherintanceChain = [clazz];
	while(true) {
		clazz = clazz.__super__;
		if(!(clazz != null)) {
			break;
		}
		inherintanceChain.push(clazz);
	}
	return inherintanceChain;
};
hex_util_ClassUtil.getInheritanceChainFrom = function(instance) {
	var o = instance;
	var type = o == null ? null : js_Boot.getClass(o);
	if(type != null) {
		return hex_util_ClassUtil.getInheritanceChain(type);
	} else {
		return [];
	}
};
hex_util_ClassUtil.classExtendsOrImplements = function(classOrClassName,superClass) {
	var actualClass = null;
	if(js_Boot.__instanceof(classOrClassName,Class)) {
		actualClass = js_Boot.__cast(classOrClassName , Class);
	} else if(typeof(classOrClassName) == "string") {
		try {
			var name = js_Boot.__cast(classOrClassName , String);
			actualClass = $hxClasses[name];
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			throw new js__$Boot_HaxeError("The class name " + Std.string(classOrClassName) + " is not valid because of " + Std.string(e1) + "\n" + Std.string(e1.getStackTrace()));
		}
	}
	if(actualClass == null) {
		throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("The parameter classOrClassName must be a Class or fully qualified class name.",{ fileName : "hex/util/ClassUtil.hx", lineNumber : 56, className : "hex.util.ClassUtil", methodName : "classExtendsOrImplements"}));
	}
	var classInstance = Object.create(actualClass.prototype);
	return js_Boot.__instanceof(classInstance,superClass);
};
hex_util_ClassUtil.getStaticVariableReference = function(qualifiedClassName) {
	var a = qualifiedClassName.split(".");
	var type = a[a.length - 1];
	a.splice(a.length - 1,1);
	var classReference = hex_util_ClassUtil.getClassReference(a.join("."));
	var staticRef = Reflect.field(classReference,type);
	if(staticRef == null) {
		throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("ClassUtil.getStaticVariableReference fails with '" + qualifiedClassName + "'",{ fileName : "hex/util/ClassUtil.hx", lineNumber : 73, className : "hex.util.ClassUtil", methodName : "getStaticVariableReference"}));
	}
	return staticRef;
};
hex_util_ClassUtil.getClassNameFromFullyQualifiedName = function(qualifiedClassName) {
	var a = qualifiedClassName.split(".");
	return a[a.length - 1];
};
hex_util_ClassUtil.getClassNameFromStaticReference = function(qualifiedClassName) {
	var a = qualifiedClassName.split(".");
	var type = a[a.length - 1];
	a.splice(a.length - 1,1);
	return a.join(".");
};
hex_util_ClassUtil.getStaticVariableNameFromStaticReference = function(qualifiedClassName) {
	var a = qualifiedClassName.split(".");
	return a[a.length - 1];
};
hex_util_ClassUtil.getClassReference = function(qualifiedClassName) {
	var classReference = $hxClasses[qualifiedClassName];
	if(classReference == null) {
		throw new js__$Boot_HaxeError(new hex_error_IllegalArgumentException("ClassUtil.getClassReference fails with class named '" + qualifiedClassName + "'",{ fileName : "hex/util/ClassUtil.hx", lineNumber : 105, className : "hex.util.ClassUtil", methodName : "getClassReference"}));
	}
	return classReference;
};
hex_util_ClassUtil.getClassName = function(target) {
	var type = Type.getClassName(target == null ? null : js_Boot.getClass(target));
	if(type != null) {
		return type;
	} else {
		return "Dynamic";
	}
};
hex_util_ClassUtil.prototype = {
	__class__: hex_util_ClassUtil
};
var jsonStream_testUtil_JsonEquality = function() { };
$hxClasses["jsonStream.testUtil.JsonEquality"] = jsonStream_testUtil_JsonEquality;
jsonStream_testUtil_JsonEquality.__name__ = ["jsonStream","testUtil","JsonEquality"];
jsonStream_testUtil_JsonEquality.deepEquals = function(left,right) {
	if(left == right) {
		return true;
	}
	var _g = Type["typeof"](right);
	var _g1 = Type["typeof"](left);
	switch(_g1._hx_index) {
	case 1:
		if(_g._hx_index == 1) {
			return left == right;
		} else {
			return false;
		}
		break;
	case 2:
		if(_g._hx_index == 2) {
			return left == right;
		} else {
			return false;
		}
		break;
	case 3:
		if(_g._hx_index == 3) {
			return left == right;
		} else {
			return false;
		}
		break;
	case 4:
		if(_g._hx_index == 4) {
			var leftFields = Reflect.fields(left);
			var rightFields = Reflect.fields(right);
			if(leftFields.length != rightFields.length) {
				return false;
			}
			var _g2 = 0;
			while(_g2 < rightFields.length) {
				var fieldName = rightFields[_g2];
				++_g2;
				if(!jsonStream_testUtil_JsonEquality.deepEquals(Reflect.field(left,fieldName),Reflect.field(right,fieldName))) {
					return false;
				}
			}
			return true;
		} else {
			return false;
		}
		break;
	case 6:
		switch(_g1.c) {
		case Array:
			if(_g._hx_index == 6) {
				if(_g.c == Array) {
					var leftArray = left;
					var rightArray = right;
					if(leftArray.length != rightArray.length) {
						return false;
					}
					var _g11 = 0;
					var _g3 = leftArray.length;
					while(_g11 < _g3) {
						var i = _g11++;
						if(!jsonStream_testUtil_JsonEquality.deepEquals(leftArray[i],rightArray[i])) {
							return false;
						}
					}
					return true;
				} else {
					var leftFields1 = Reflect.fields(left);
					var rightFields1 = Reflect.fields(right);
					if(leftFields1.length != rightFields1.length) {
						return false;
					}
					var _g4 = 0;
					while(_g4 < rightFields1.length) {
						var fieldName1 = rightFields1[_g4];
						++_g4;
						if(!jsonStream_testUtil_JsonEquality.deepEquals(Reflect.field(left,fieldName1),Reflect.field(right,fieldName1))) {
							return false;
						}
					}
					return true;
				}
			} else {
				return false;
			}
			break;
		case String:
			if(_g._hx_index == 6) {
				if(_g.c == String) {
					return left == right;
				} else {
					var leftFields2 = Reflect.fields(left);
					var rightFields2 = Reflect.fields(right);
					if(leftFields2.length != rightFields2.length) {
						return false;
					}
					var _g5 = 0;
					while(_g5 < rightFields2.length) {
						var fieldName2 = rightFields2[_g5];
						++_g5;
						if(!jsonStream_testUtil_JsonEquality.deepEquals(Reflect.field(left,fieldName2),Reflect.field(right,fieldName2))) {
							return false;
						}
					}
					return true;
				}
			} else {
				return false;
			}
			break;
		case haxe_ds_IntMap:
			if(_g._hx_index == 6) {
				if(_g.c == haxe_ds_IntMap) {
					var leftIntMap = left;
					var rightIntMap = right;
					if(!jsonStream_testUtil_JsonEquality.deepEquals(leftIntMap.toString(),rightIntMap.toString())) {
						return false;
					}
					return true;
				} else {
					var leftFields3 = Reflect.fields(left);
					var rightFields3 = Reflect.fields(right);
					if(leftFields3.length != rightFields3.length) {
						return false;
					}
					var _g6 = 0;
					while(_g6 < rightFields3.length) {
						var fieldName3 = rightFields3[_g6];
						++_g6;
						if(!jsonStream_testUtil_JsonEquality.deepEquals(Reflect.field(left,fieldName3),Reflect.field(right,fieldName3))) {
							return false;
						}
					}
					return true;
				}
			} else {
				return false;
			}
			break;
		case haxe_ds_StringMap:
			if(_g._hx_index == 6) {
				if(_g.c == haxe_ds_StringMap) {
					var leftIntMap1 = left;
					var rightIntMap1 = right;
					if(!jsonStream_testUtil_JsonEquality.deepEquals(leftIntMap1.toString(),rightIntMap1.toString())) {
						return false;
					}
					return true;
				} else {
					var leftFields4 = Reflect.fields(left);
					var rightFields4 = Reflect.fields(right);
					if(leftFields4.length != rightFields4.length) {
						return false;
					}
					var _g7 = 0;
					while(_g7 < rightFields4.length) {
						var fieldName4 = rightFields4[_g7];
						++_g7;
						if(!jsonStream_testUtil_JsonEquality.deepEquals(Reflect.field(left,fieldName4),Reflect.field(right,fieldName4))) {
							return false;
						}
					}
					return true;
				}
			} else {
				return false;
			}
			break;
		default:
			if(_g._hx_index == 6) {
				var leftFields5 = Reflect.fields(left);
				var rightFields5 = Reflect.fields(right);
				if(leftFields5.length != rightFields5.length) {
					return false;
				}
				var _g8 = 0;
				while(_g8 < rightFields5.length) {
					var fieldName5 = rightFields5[_g8];
					++_g8;
					if(!jsonStream_testUtil_JsonEquality.deepEquals(Reflect.field(left,fieldName5),Reflect.field(right,fieldName5))) {
						return false;
					}
				}
				return true;
			} else {
				return false;
			}
		}
		break;
	default:
		return false;
	}
};
var scout_ChildrenImpl = function(children) {
	this.children = [];
	if(children != null) {
		this.children = children;
	}
};
$hxClasses["scout.ChildrenImpl"] = scout_ChildrenImpl;
scout_ChildrenImpl.__name__ = ["scout","ChildrenImpl"];
scout_ChildrenImpl.__interfaces__ = [scout_Child,scout_Renderable];
scout_ChildrenImpl.prototype = {
	get_length: function() {
		return this.children.length;
	}
	,setParent: function(parent) {
		this.parent = parent;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var view = _g1[_g];
			++_g;
			view.setParent(this.parent);
		}
	}
	,detachFromParent: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var view = _g1[_g];
			++_g;
			view.detachFromParent();
		}
	}
	,add: function(view) {
		view.setParent(this.parent);
		this.children.push(view);
		if((this.parent instanceof scout_View)) {
			var view1 = this.parent;
			view1.render();
		}
	}
	,prepend: function(view) {
		view.setParent(this.parent);
		this.children.unshift(view);
		if((this.parent instanceof scout_View)) {
			var view1 = this.parent;
			view1.render();
		}
	}
	,remove: function(view) {
		var child = Lambda.find(this.children,function(c) {
			return c == view;
		});
		if(child != null) {
			child.detachFromParent();
			if((child instanceof scout_View)) {
				var view1 = child;
				view1.remove();
			}
			HxOverrides.remove(this.children,child);
			if((this.parent instanceof scout_View)) {
				var view2 = this.parent;
				view2.render();
			}
		}
	}
	,getAt: function(index) {
		return this.children[index];
	}
	,has: function(view) {
		return Lambda.has(this.children,view);
	}
	,find: function(cb) {
		return Lambda.find(this.children,cb);
	}
	,map: function(cb) {
		return this.children.map(cb);
	}
	,iterator: function() {
		return this.children;
	}
	,toRenderResult: function() {
		return scout__$RenderResult_RenderResult_$Impl_$._new("" + this.children.map(function(r) {
			return r.toRenderResult();
		}).join(""));
	}
	,__class__: scout_ChildrenImpl
	,__properties__: {get_length:"get_length"}
};
var scout__$Children_Children_$Impl_$ = {};
$hxClasses["scout._Children.Children_Impl_"] = scout__$Children_Children_$Impl_$;
scout__$Children_Children_$Impl_$.__name__ = ["scout","_Children","Children_Impl_"];
scout__$Children_Children_$Impl_$._new = function(children) {
	var this1 = new scout_ChildrenImpl(children);
	return this1;
};
scout__$Children_Children_$Impl_$.ofArray = function(children) {
	var this1 = new scout_ChildrenImpl(children);
	return this1;
};
var scout_Collection = function(init) {
	this.modelListeners = new haxe_ds_ObjectMap();
	this.onChange = { slots : []};
	this.onRemove = { slots : []};
	this.onAdd = { slots : []};
	this.models = init != null ? init : [];
};
$hxClasses["scout.Collection"] = scout_Collection;
scout_Collection.__name__ = ["scout","Collection"];
scout_Collection.__interfaces__ = [scout_Observable];
scout_Collection.prototype = {
	get_length: function() {
		return this.models.length;
	}
	,observe: function(cb) {
		return scout__$Signal_Signal_$Impl_$.add(this.onChange,cb);
	}
	,add: function(model) {
		var _gthis = this;
		if(!Lambda.has(this.models,model)) {
			this.models.push(model);
			this.modelListeners.set(model,model.observe(function(_) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.onChange,_gthis);
			}));
			scout__$Signal_Signal_$Impl_$.dispatch(this.onAdd,model);
			scout__$Signal_Signal_$Impl_$.dispatch(this.onChange,this);
		}
		return this;
	}
	,indexOf: function(model) {
		return this.models.indexOf(model);
	}
	,filter: function(f) {
		return this.models.filter(f);
	}
	,exists: function(model) {
		return Lambda.has(this.models,model);
	}
	,idExists: function(id) {
		return Lambda.exists(this.models,function(m) {
			return m.get_id() == id;
		});
	}
	,has: function(elt) {
		return Lambda.exists(this.models,elt);
	}
	,find: function(elt) {
		return Lambda.find(this.models,elt);
	}
	,get: function(id) {
		return Lambda.find(this.models,function(m) {
			return m.get_id() == id;
		});
	}
	,getAt: function(index) {
		return this.models[index];
	}
	,each: function(cb) {
		Lambda.foreach(this.models,cb);
		return this;
	}
	,map: function(cb) {
		return this.models.map(cb);
	}
	,iterator: function() {
		return HxOverrides.iter(this.models);
	}
	,remove: function(model) {
		if(this.modelListeners.h.__keys__[model.__id__] != null) {
			var this1 = this.modelListeners.h[model.__id__];
			var this2 = this1.signal;
			var listener = this1.listener;
			this2.slots = this2.slots.filter(function(slot) {
				return slot.listener != listener;
			});
			this.modelListeners.remove(model);
		}
		if(Lambda.exists(this.models,function(m) {
			return m.get_id() == model.get_id();
		})) {
			this.models = this.models.filter(function(m1) {
				return m1.get_id() != model.get_id();
			});
			scout__$Signal_Signal_$Impl_$.dispatch(this.onRemove,model);
			scout__$Signal_Signal_$Impl_$.dispatch(this.onChange,this);
		}
		return this;
	}
	,removeById: function(id) {
		var id1 = id;
		var model = Lambda.find(this.models,function(m) {
			return m.get_id() == id1;
		});
		if(model != null) {
			this.remove(model);
		}
		return this;
	}
	,__class__: scout_Collection
	,__properties__: {get_length:"get_length"}
};
var scout_CollectionTest = function() { };
$hxClasses["scout.CollectionTest"] = scout_CollectionTest;
scout_CollectionTest.__name__ = ["scout","CollectionTest"];
scout_CollectionTest.prototype = {
	testBasics: function() {
		var collection = new scout_Collection([new fixture_model_SimpleModel({ id : 1, name : "foo", value : "bar"})]);
		var model = Lambda.find(collection.models,function(m) {
			return m.get_id() == 1;
		});
		hex_unittest_assertion_Assert.equals(model.get_name(),"foo",null,{ fileName : "test/scout/CollectionTest.hx", lineNumber : 19, className : "scout.CollectionTest", methodName : "testBasics"});
		hex_unittest_assertion_Assert.isTrue(Lambda.has(collection.models,model),null,{ fileName : "test/scout/CollectionTest.hx", lineNumber : 20, className : "scout.CollectionTest", methodName : "testBasics"});
		hex_unittest_assertion_Assert.isTrue(Lambda.exists(collection.models,function(m1) {
			return m1.get_value() == model.get_value();
		}),null,{ fileName : "test/scout/CollectionTest.hx", lineNumber : 21, className : "scout.CollectionTest", methodName : "testBasics"});
		collection.remove(model);
		hex_unittest_assertion_Assert.isFalse(Lambda.has(collection.models,model),null,{ fileName : "test/scout/CollectionTest.hx", lineNumber : 23, className : "scout.CollectionTest", methodName : "testBasics"});
	}
	,testDoesNotAddDups: function() {
		var collection = new scout_Collection();
		var model = new fixture_model_SimpleModel({ id : 1, name : "foo", value : "bar"});
		collection.add(model);
		collection.add(model);
		hex_unittest_assertion_Assert.equals(collection.get_length(),1,null,{ fileName : "test/scout/CollectionTest.hx", lineNumber : 36, className : "scout.CollectionTest", methodName : "testDoesNotAddDups"});
	}
	,testAddRemoveLifecycle: function() {
		var collection = new scout_Collection([new fixture_model_SimpleModel({ id : 1, name : "foo", value : "bar"})]);
		var onAdd = 0;
		var onRemove = 0;
		scout__$Signal_Signal_$Impl_$.add(collection.onAdd,function(_) {
			onAdd += 1;
			return onAdd - 1;
		});
		scout__$Signal_Signal_$Impl_$.add(collection.onRemove,function(_1) {
			onRemove += 1;
			return onRemove - 1;
		});
		var model = new fixture_model_SimpleModel({ id : 2, name : "bin", value : "bax"});
		collection.add(model);
		collection.remove(model);
		hex_unittest_assertion_Assert.equals(onAdd,1,null,{ fileName : "test/scout/CollectionTest.hx", lineNumber : 59, className : "scout.CollectionTest", methodName : "testAddRemoveLifecycle"});
		hex_unittest_assertion_Assert.equals(onRemove,1,null,{ fileName : "test/scout/CollectionTest.hx", lineNumber : 60, className : "scout.CollectionTest", methodName : "testAddRemoveLifecycle"});
	}
	,testModelChanges: function() {
		var collection = new scout_Collection();
		var changed = 0;
		var model = new fixture_model_SimpleModel({ id : 1, name : "foo", value : "bar"});
		collection.observe(function(_) {
			changed += 1;
			return changed - 1;
		});
		collection.add(model);
		model.set_name("changed");
		model.set_value("changed");
		hex_unittest_assertion_Assert.equals(changed,3,null,{ fileName : "test/scout/CollectionTest.hx", lineNumber : 79, className : "scout.CollectionTest", methodName : "testModelChanges"});
		collection.remove(model);
		model.set_name("changed again");
		model.set_value("changed again");
		hex_unittest_assertion_Assert.equals(changed,4,null,{ fileName : "test/scout/CollectionTest.hx", lineNumber : 85, className : "scout.CollectionTest", methodName : "testModelChanges"});
	}
	,__class__: scout_CollectionTest
};
var scout_Dom = function() { };
$hxClasses["scout.Dom"] = scout_Dom;
scout_Dom.__name__ = ["scout","Dom"];
scout_Dom.delegate = function(el,selector,type,cb,useCapture) {
	var listener = function(e) {
		var del = scout_Dom.closest(e.target,selector);
		if(del != null) {
			cb(e);
		}
	};
	if(selector == null) {
		listener = cb;
	}
	el.addEventListener(type,listener,useCapture);
	return { destroy : function() {
		el.removeEventListener(type,listener,useCapture);
	}};
};
scout_Dom.select = function(sel) {
	return window.document.querySelector(sel);
};
scout_Dom.selectAll = function(sel) {
	return window.document.querySelectorAll(sel);
};
scout_Dom.closest = function(el,selector) {
	while(el != null && el.nodeType != scout_Dom.docNodeType) {
		if(el.matches(selector)) {
			return el;
		}
		el = el.parentNode;
	}
	if(el == null || el.nodeType == scout_Dom.docNodeType) {
		return null;
	}
	return el;
};
scout_Dom.html = function(el,html) {
	el.innerHTML = html;
	return el;
};
var scout_ModelTest = function() { };
$hxClasses["scout.ModelTest"] = scout_ModelTest;
scout_ModelTest.__name__ = ["scout","ModelTest"];
scout_ModelTest.prototype = {
	testConstructor: function() {
		var simple = new fixture_model_SimpleModel({ name : "foo", value : "bar"});
		hex_unittest_assertion_Assert.equals(simple.get_id(),fixture_model_SimpleModel.__scout_ids,null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 15, className : "scout.ModelTest", methodName : "testConstructor"});
		hex_unittest_assertion_Assert.equals("foo",simple.get_name(),null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 16, className : "scout.ModelTest", methodName : "testConstructor"});
		hex_unittest_assertion_Assert.equals("bar",simple.get_value(),null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 17, className : "scout.ModelTest", methodName : "testConstructor"});
	}
	,testSignalsWithObserve: function() {
		var simple = new fixture_model_SimpleModel({ id : 1, name : "foo", value : "bar"});
		var nameChanged = 0;
		simple.observe(function(_) {
			nameChanged += 1;
			return nameChanged - 1;
		});
		simple.set_name("one");
		simple.set_name("two");
		simple.set_name("four");
		hex_unittest_assertion_Assert.equals(nameChanged,3,null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 32, className : "scout.ModelTest", methodName : "testSignalsWithObserve"});
	}
	,signalDoesNotFireIfNoChange: function() {
		var simple = new fixture_model_SimpleModel({ id : 1, name : "foo", value : "bar"});
		var nameChanged = 0;
		simple.observe(function(_) {
			nameChanged += 1;
			return nameChanged - 1;
		});
		simple.set_name("one");
		simple.set_name("one");
		simple.set_name("one");
		simple.set_name("one");
		simple.set_name("one");
		simple.set_name("two");
		hex_unittest_assertion_Assert.equals(nameChanged,2,null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 50, className : "scout.ModelTest", methodName : "signalDoesNotFireIfNoChange"});
	}
	,testSpecificSignals: function() {
		var simple = new fixture_model_SimpleModel({ id : 1, name : "foo", value : "bar"});
		var nameChanged = 0;
		var valueChanged = 0;
		simple.props.name.observe(function(_) {
			nameChanged += 1;
			return nameChanged - 1;
		});
		simple.props.value.observe(function(_1) {
			valueChanged += 1;
			return valueChanged - 1;
		});
		simple.set_name("one");
		simple.set_name("two");
		simple.set_name("four");
		hex_unittest_assertion_Assert.equals(nameChanged,3,null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 68, className : "scout.ModelTest", methodName : "testSpecificSignals"});
		simple.set_value("one");
		simple.set_value("two");
		simple.set_value("four");
		hex_unittest_assertion_Assert.equals(valueChanged,3,null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 73, className : "scout.ModelTest", methodName : "testSpecificSignals"});
	}
	,testComputed: function() {
		var computed = new fixture_model_ComputedModel({ foo : "foo", bar : "bar"});
		var fooBarChanged = 0;
		computed.props.fooBar.observe(function(_) {
			fooBarChanged += 1;
			return fooBarChanged - 1;
		});
		hex_unittest_assertion_Assert.equals(computed.get_fooBar(),"foobar",null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 85, className : "scout.ModelTest", methodName : "testComputed"});
		computed.set_foo("changed");
		hex_unittest_assertion_Assert.equals(fooBarChanged,1,null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 87, className : "scout.ModelTest", methodName : "testComputed"});
		hex_unittest_assertion_Assert.equals(computed.get_fooBar(),"changedbar",null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 88, className : "scout.ModelTest", methodName : "testComputed"});
		computed.set_bar("changed");
		hex_unittest_assertion_Assert.equals(fooBarChanged,2,null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 90, className : "scout.ModelTest", methodName : "testComputed"});
		hex_unittest_assertion_Assert.equals(computed.get_fooBar(),"changedchanged",null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 91, className : "scout.ModelTest", methodName : "testComputed"});
	}
	,testAutoIncrement: function() {
		var start = fixture_model_ComputedModel.__scout_ids;
		var one = new fixture_model_ComputedModel({ foo : "foo", bar : "bar"});
		var two = new fixture_model_ComputedModel({ foo : "foo", bar : "bar"});
		hex_unittest_assertion_Assert.isTrue(one.get_id() != two.get_id(),null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 100, className : "scout.ModelTest", methodName : "testAutoIncrement"});
		hex_unittest_assertion_Assert.equals(start + 1,one.get_id(),null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 101, className : "scout.ModelTest", methodName : "testAutoIncrement"});
		hex_unittest_assertion_Assert.equals(start + 2,two.get_id(),null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 102, className : "scout.ModelTest", methodName : "testAutoIncrement"});
	}
	,testReactiveModel: function() {
		var model = new fixture_model_ReactiveModel({ foo : "bar"});
		model.set_foo("bin");
		model.set_foo("bax");
		hex_unittest_assertion_Assert.equals(model.changed,2,null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 112, className : "scout.ModelTest", methodName : "testReactiveModel"});
	}
	,testTransitionableModel: function() {
		var model = new fixture_model_TransitionableModel({ id : 0, name : "foo", value : "foo"});
		var changed = 0;
		model.observe(function(_) {
			changed += 1;
		});
		model.setNameAndValue("bar","bar");
		hex_unittest_assertion_Assert.equals(changed,1,null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 126, className : "scout.ModelTest", methodName : "testTransitionableModel"});
		hex_unittest_assertion_Assert.equals(model.get_name(),"bar",null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 127, className : "scout.ModelTest", methodName : "testTransitionableModel"});
		hex_unittest_assertion_Assert.equals(model.get_value(),"bar",null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 128, className : "scout.ModelTest", methodName : "testTransitionableModel"});
		changed = 0;
		model.set_name("foo");
		model.set_value("foo");
		hex_unittest_assertion_Assert.equals(changed,2,null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 134, className : "scout.ModelTest", methodName : "testTransitionableModel"});
	}
	,testOptionalModel: function() {
		var model = new fixture_model_OptionalModel({ name : "foo"});
		hex_unittest_assertion_Assert.equals(model.get_value(),null,null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 142, className : "scout.ModelTest", methodName : "testOptionalModel"});
	}
	,testModelsUseTheCorrectPropertyWithViews: function() {
		var model = new fixture_model_WithViewModel({ view : new fixture_view_SimpleView({ location : "World", greeting : "Hello"})});
		hex_unittest_assertion_Assert.equals(model.get_view().get_location(),"World",null,{ fileName : "test/scout/ModelTest.hx", lineNumber : 151, className : "scout.ModelTest", methodName : "testModelsUseTheCorrectPropertyWithViews"});
	}
	,__class__: scout_ModelTest
};
var scout_State = function() { };
$hxClasses["scout.State"] = scout_State;
scout_State.__name__ = ["scout","State"];
scout_State.__interfaces__ = [scout_Observable];
scout_State.prototype = {
	__class__: scout_State
};
var scout_Property = function(value) {
	this.signal = { slots : []};
	this.value = value;
};
$hxClasses["scout.Property"] = scout_Property;
scout_Property.__name__ = ["scout","Property"];
scout_Property.__interfaces__ = [scout_State];
scout_Property.prototype = {
	set: function(value) {
		if(this.value == value) {
			return;
		}
		this.value = value;
		scout__$Signal_Signal_$Impl_$.dispatch(this.signal,this.value);
	}
	,get: function() {
		return this.value;
	}
	,observe: function(cb) {
		return scout__$Signal_Signal_$Impl_$.add(this.signal,cb);
	}
	,__class__: scout_Property
};
var scout_PropertyOfObservable = function(value) {
	this.signal = { slots : []};
	var _gthis = this;
	if(value != null) {
		this.value = value;
		this.lastSlot = value.observe(function(_) {
			scout__$Signal_Signal_$Impl_$.dispatch(_gthis.signal,value);
		});
	}
};
$hxClasses["scout.PropertyOfObservable"] = scout_PropertyOfObservable;
scout_PropertyOfObservable.__name__ = ["scout","PropertyOfObservable"];
scout_PropertyOfObservable.__interfaces__ = [scout_State];
scout_PropertyOfObservable.prototype = {
	set: function(value) {
		var _gthis = this;
		if(this.value == value) {
			return;
		}
		this.value = value;
		if(this.lastSlot != null) {
			var this1 = this.lastSlot;
			var this2 = this1.signal;
			var listener = this1.listener;
			this2.slots = this2.slots.filter(function(slot) {
				return slot.listener != listener;
			});
		}
		if(value != null) {
			this.lastSlot = value.observe(function(_) {
				scout__$Signal_Signal_$Impl_$.dispatch(_gthis.signal,value);
			});
		}
		scout__$Signal_Signal_$Impl_$.dispatch(this.signal,value);
	}
	,get: function() {
		return this.value;
	}
	,observe: function(cb) {
		return scout__$Signal_Signal_$Impl_$.add(this.signal,cb);
	}
	,__class__: scout_PropertyOfObservable
};
var scout_PropertyOfChild = function(parent,target) {
	this.signal = { slots : []};
	this.parent = parent;
	if(target != null) {
		this.target = target;
		target.setParent(this.parent);
	}
};
$hxClasses["scout.PropertyOfChild"] = scout_PropertyOfChild;
scout_PropertyOfChild.__name__ = ["scout","PropertyOfChild"];
scout_PropertyOfChild.__interfaces__ = [scout_State];
scout_PropertyOfChild.prototype = {
	set: function(target) {
		if(this.target == target) {
			return;
		}
		if(this.target != null) {
			this.target.detachFromParent();
		}
		this.target = target;
		this.target.setParent(this.parent);
		scout__$Signal_Signal_$Impl_$.dispatch(this.signal,this.target);
	}
	,get: function() {
		return this.target;
	}
	,observe: function(cb) {
		return scout__$Signal_Signal_$Impl_$.add(this.signal,cb);
	}
	,__class__: scout_PropertyOfChild
};
var scout__$RenderResult_RenderResult_$Impl_$ = {};
$hxClasses["scout._RenderResult.RenderResult_Impl_"] = scout__$RenderResult_RenderResult_$Impl_$;
scout__$RenderResult_RenderResult_$Impl_$.__name__ = ["scout","_RenderResult","RenderResult_Impl_"];
scout__$RenderResult_RenderResult_$Impl_$._new = function(str) {
	var this1 = str;
	return this1;
};
scout__$RenderResult_RenderResult_$Impl_$.ofRenderable = function(renderable) {
	return renderable.toRenderResult();
};
var scout__$Signal_SignalSlot_$Impl_$ = {};
$hxClasses["scout._Signal.SignalSlot_Impl_"] = scout__$Signal_SignalSlot_$Impl_$;
scout__$Signal_SignalSlot_$Impl_$.__name__ = ["scout","_Signal","SignalSlot_Impl_"];
scout__$Signal_SignalSlot_$Impl_$._new = function(listener,signal,once) {
	if(once == null) {
		once = false;
	}
	var this1 = { listener : listener, signal : signal, once : once};
	return this1;
};
scout__$Signal_SignalSlot_$Impl_$.remove = function(this1) {
	var this2 = this1.signal;
	var listener = this1.listener;
	this2.slots = this2.slots.filter(function(slot) {
		return slot.listener != listener;
	});
};
var scout__$Signal_Signal_$Impl_$ = {};
$hxClasses["scout._Signal.Signal_Impl_"] = scout__$Signal_Signal_$Impl_$;
scout__$Signal_Signal_$Impl_$.__name__ = ["scout","_Signal","Signal_Impl_"];
scout__$Signal_Signal_$Impl_$.observe = function(obs,cb) {
	obs.observe(cb);
};
scout__$Signal_Signal_$Impl_$.toObservable = function(this1) {
	return { observe : function(cb) {
		return scout__$Signal_Signal_$Impl_$.add(this1,cb);
	}};
};
scout__$Signal_Signal_$Impl_$._new = function() {
	var this1 = { slots : []};
	return this1;
};
scout__$Signal_Signal_$Impl_$.add = function(this1,listener,once) {
	if(once == null) {
		once = false;
	}
	var this2 = { listener : listener, signal : this1, once : once};
	var slot = this2;
	this1.slots.push(slot);
	return slot;
};
scout__$Signal_Signal_$Impl_$.once = function(this1,listener) {
	return scout__$Signal_Signal_$Impl_$.add(this1,listener,true);
};
scout__$Signal_Signal_$Impl_$.remove = function(this1,listener) {
	this1.slots = this1.slots.filter(function(slot) {
		return slot.listener != listener;
	});
};
scout__$Signal_Signal_$Impl_$.dispatch = function(this1,data) {
	var _g = 0;
	var _g1 = this1.slots;
	while(_g < _g1.length) {
		var slot = _g1[_g];
		++_g;
		slot.listener(data);
		if(slot.once) {
			var this2 = slot.signal;
			this2.slots = this2.slots.filter((function(listener) {
				return function(slot1) {
					return slot1.listener != listener[0];
				};
			})([slot.listener]));
		}
	}
};
var scout__$Template_SafeContent = function(content) {
	this.content = content;
};
$hxClasses["scout._Template.SafeContent"] = scout__$Template_SafeContent;
scout__$Template_SafeContent.__name__ = ["scout","_Template","SafeContent"];
scout__$Template_SafeContent.__interfaces__ = [scout_Renderable];
scout__$Template_SafeContent.prototype = {
	toRenderResult: function() {
		return this.content;
	}
	,__class__: scout__$Template_SafeContent
};
var scout_Template = function() { };
$hxClasses["scout.Template"] = scout_Template;
scout_Template.__name__ = ["scout","Template"];
scout_Template.safe = function(str) {
	return new scout__$Template_SafeContent(str);
};
var scout_TemplateTest = function() { };
$hxClasses["scout.TemplateTest"] = scout_TemplateTest;
scout_TemplateTest.__name__ = ["scout","TemplateTest"];
scout_TemplateTest.prototype = {
	testEscape: function() {
		var unsafe = "<script>alert(\"oh noes\");</script>";
		var expected = scout__$RenderResult_RenderResult_$Impl_$._new("<div>This is ok:" + StringTools.htmlEscape(unsafe == null ? "null" : "" + unsafe) + "</div>");
		hex_unittest_assertion_Assert.equals(expected,"<div>This is ok:&lt;script&gt;alert(\"oh noes\");&lt;/script&gt;</div>",null,{ fileName : "test/scout/TemplateTest.hx", lineNumber : 13, className : "scout.TemplateTest", methodName : "testEscape"});
	}
	,testDoesNotEscapeNestedTemplates: function() {
		var header = function(title) {
			return scout__$RenderResult_RenderResult_$Impl_$._new("<h1>" + StringTools.htmlEscape(title == null ? "null" : "" + title) + "</h1>");
		};
		var actual = scout__$RenderResult_RenderResult_$Impl_$._new("<div>" + header("foo") + "<p>bar</p></div>");
		hex_unittest_assertion_Assert.equals(actual,"<div><h1>foo</h1><p>bar</p></div>",null,{ fileName : "test/scout/TemplateTest.hx", lineNumber : 20, className : "scout.TemplateTest", methodName : "testDoesNotEscapeNestedTemplates"});
	}
	,testArrays: function() {
		var a = "a";
		var b = "b";
		var actual = scout__$RenderResult_RenderResult_$Impl_$._new("<p>" + [a,b,"c"].map(function(s) {
			if(js_Boot.__instanceof(s,scout_Renderable)) {
				return (js_Boot.__cast(s , scout_Renderable)).toRenderResult();
			} else {
				return StringTools.htmlEscape(s == null ? "null" : "" + s);
			}
		}).join("") + "</p>");
		hex_unittest_assertion_Assert.equals(actual,"<p>abc</p>",null,{ fileName : "test/scout/TemplateTest.hx", lineNumber : 28, className : "scout.TemplateTest", methodName : "testArrays"});
	}
	,testArraysFromVarOfStringArray: function() {
		var a = "a";
		var b = "b";
		var data = [a,b,"<p>c</p>"];
		var actual = scout__$RenderResult_RenderResult_$Impl_$._new("<p>" + data.map(function(s) {
			if(js_Boot.__instanceof(s,scout_Renderable)) {
				return (js_Boot.__cast(s , scout_Renderable)).toRenderResult();
			} else {
				return StringTools.htmlEscape(s == null ? "null" : "" + s);
			}
		}).join("") + "</p>");
		hex_unittest_assertion_Assert.equals(actual,"<p>ab&lt;p&gt;c&lt;/p&gt;</p>",null,{ fileName : "test/scout/TemplateTest.hx", lineNumber : 37, className : "scout.TemplateTest", methodName : "testArraysFromVarOfStringArray"});
	}
	,testArraysFromVarOfRenderResult: function() {
		var a = "a";
		var b = "b";
		var data = [a,b,"<p>c</p>"];
		var actual = scout__$RenderResult_RenderResult_$Impl_$._new("<p>" + scout__$RenderResult_RenderResult_$Impl_$._new(data.join("")) + "</p>");
		hex_unittest_assertion_Assert.equals(actual,"<p>ab<p>c</p></p>",null,{ fileName : "test/scout/TemplateTest.hx", lineNumber : 46, className : "scout.TemplateTest", methodName : "testArraysFromVarOfRenderResult"});
	}
	,__class__: scout_TemplateTest
};
var scout_ViewTest = function() { };
$hxClasses["scout.ViewTest"] = scout_ViewTest;
scout_ViewTest.__name__ = ["scout","ViewTest"];
scout_ViewTest.prototype = {
	testSimpleView: function() {
		var view = new fixture_view_SimpleView({ greeting : "Hey", location : "World"});
		hex_unittest_assertion_Assert.equals(view.render().get_content(),"<div><p>Hey World</p></div>",null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 16, className : "scout.ViewTest", methodName : "testSimpleView"});
	}
	,testCustomElement: function() {
		var view = new fixture_view_CustomElementView({ className : "foo", foo : "foo"});
		hex_unittest_assertion_Assert.equals(view.render().get_content(),"<span class=\"foo\" id=\"" + view.cid + "\" data-foo=\"foo\" data-bar=\"bar\"></span>",null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 25, className : "scout.ViewTest", methodName : "testCustomElement"});
	}
	,testChild: function() {
		var bar = new fixture_view_SingleChildView({ child : new fixture_view_SimpleView({ location : "World", greeting : "Hello"})});
		var expected = "<div><div class=\"content\"><div><p>Hello World</p></div></div></div>";
		hex_unittest_assertion_Assert.equals(bar.render().get_content(),expected,null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 37, className : "scout.ViewTest", methodName : "testChild"});
		hex_unittest_assertion_Assert.equals(bar.render().get_content(),expected,null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 39, className : "scout.ViewTest", methodName : "testChild"});
	}
	,testChildren: function() {
		var this1 = new scout_ChildrenImpl([new fixture_view_SimpleView({ location : "World", greeting : "Hello"}),new fixture_view_SimpleView({ location : "World", greeting : "Goodbye"})]);
		var bar = new fixture_view_ChildrenView({ body : this1});
		var expected = "<div><div class=\"content\"><div><p>Hello World</p></div><div><p>Goodbye World</p></div></div></div>";
		hex_unittest_assertion_Assert.equals(bar.render().get_content(),expected,null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 57, className : "scout.ViewTest", methodName : "testChildren"});
		hex_unittest_assertion_Assert.equals(bar.render().get_content(),expected,null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 58, className : "scout.ViewTest", methodName : "testChildren"});
	}
	,testStatefulView: function() {
		var view = new fixture_view_StatefulView({ foo : "foo"});
		hex_unittest_assertion_Assert.equals(view.render().get_content(),"<div>foo</div>",null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 64, className : "scout.ViewTest", methodName : "testStatefulView"});
		view.set_foo("bar");
		hex_unittest_assertion_Assert.equals(view.get_content(),"<div>bar</div>",null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 67, className : "scout.ViewTest", methodName : "testStatefulView"});
	}
	,testStateChild: function() {
		var bar = new fixture_view_SingleStateChildView({ child : new fixture_view_SimpleView({ location : "World", greeting : "Hello"})});
		var expected = "<div><div class=\"content\"><div><p>Hello World</p></div></div></div>";
		hex_unittest_assertion_Assert.equals(bar.render().get_content(),expected,null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 79, className : "scout.ViewTest", methodName : "testStateChild"});
		hex_unittest_assertion_Assert.equals(bar.render().get_content(),expected,null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 81, className : "scout.ViewTest", methodName : "testStateChild"});
		expected = "<div><div class=\"content\"><div><p>Goodbye World</p></div></div></div>";
		bar.set_child(new fixture_view_SimpleView({ location : "World", greeting : "Goodbye"}));
		hex_unittest_assertion_Assert.equals(bar.get_content(),expected,null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 88, className : "scout.ViewTest", methodName : "testStateChild"});
		hex_unittest_assertion_Assert.equals(bar.render().get_content(),expected,null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 90, className : "scout.ViewTest", methodName : "testStateChild"});
	}
	,testModelView: function() {
		var view = new fixture_view_WithModelView({ model : new fixture_model_SimpleModel({ name : "foo", value : "bar"})});
		hex_unittest_assertion_Assert.equals(view.render().get_content(),"<div>foo bar</div>",null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 96, className : "scout.ViewTest", methodName : "testModelView"});
		view.get_model().set_name("bar");
		view.get_model().set_value("foo");
		hex_unittest_assertion_Assert.equals(view.get_content(),"<div>bar foo</div>",null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 100, className : "scout.ViewTest", methodName : "testModelView"});
	}
	,testModelStateView: function() {
		var view = new fixture_view_WithModelStateView({ model : new fixture_model_SimpleModel({ name : "foo", value : "bar"})});
		hex_unittest_assertion_Assert.equals(view.render().get_content(),"<div>foo bar</div>",null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 106, className : "scout.ViewTest", methodName : "testModelStateView"});
		view.set_model(new fixture_model_SimpleModel({ name : "bar", value : "foo"}));
		hex_unittest_assertion_Assert.equals(view.get_content(),"<div>bar foo</div>",null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 109, className : "scout.ViewTest", methodName : "testModelStateView"});
	}
	,testCollectionView: function() {
		var collection = new scout_Collection([new fixture_model_SimpleModel({ name : "foo", value : "bar"})]);
		var view = new fixture_view_WithCollectionView({ collection : collection});
		var expected = "<div><div>foo bar</div></div>";
		hex_unittest_assertion_Assert.equals(view.render().get_content(),expected,null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 119, className : "scout.ViewTest", methodName : "testCollectionView"});
		collection.add(new fixture_model_SimpleModel({ name : "bin", value : "bax"}));
		expected = "<div><div>foo bar</div><div>bin bax</div></div>";
		hex_unittest_assertion_Assert.equals(view.get_content(),expected,null,{ fileName : "test/scout/ViewTest.hx", lineNumber : 123, className : "scout.ViewTest", methodName : "testCollectionView"});
	}
	,__class__: scout_ViewTest
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
$hxClasses["tink.core.Annex"] = tink_core_Annex;
tink_core_Annex.__name__ = ["tink","core","Annex"];
tink_core_Annex.prototype = {
	__class__: tink_core_Annex
};
var tink_core__$Callback_Callback_$Impl_$ = {};
$hxClasses["tink.core._Callback.Callback_Impl_"] = tink_core__$Callback_Callback_$Impl_$;
tink_core__$Callback_Callback_$Impl_$.__name__ = ["tink","core","_Callback","Callback_Impl_"];
tink_core__$Callback_Callback_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.toFunction = function(this1) {
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	if(tink_core__$Callback_Callback_$Impl_$.depth < 1000) {
		tink_core__$Callback_Callback_$Impl_$.depth++;
		this1(data);
		tink_core__$Callback_Callback_$Impl_$.depth--;
	} else {
		var _e = this1;
		var f = function(data1) {
			tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
		};
		var data2 = data;
		tink_core__$Callback_Callback_$Impl_$.defer(function() {
			f(data2);
		});
	}
};
tink_core__$Callback_Callback_$Impl_$.ignore = function(cb) {
	return function(_) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,tink_core_Noise.Noise);
	};
};
tink_core__$Callback_Callback_$Impl_$.fromNiladic = function(f) {
	return f;
};
tink_core__$Callback_Callback_$Impl_$.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,v);
		}
	};
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var tink_core__$Callback_LinkObject = function() { };
$hxClasses["tink.core._Callback.LinkObject"] = tink_core__$Callback_LinkObject;
tink_core__$Callback_LinkObject.__name__ = ["tink","core","_Callback","LinkObject"];
tink_core__$Callback_LinkObject.prototype = {
	__class__: tink_core__$Callback_LinkObject
};
var tink_core__$Callback_CallbackLink_$Impl_$ = {};
$hxClasses["tink.core._Callback.CallbackLink_Impl_"] = tink_core__$Callback_CallbackLink_$Impl_$;
tink_core__$Callback_CallbackLink_$Impl_$.__name__ = ["tink","core","_Callback","CallbackLink_Impl_"];
tink_core__$Callback_CallbackLink_$Impl_$._new = function(link) {
	var this1 = new tink_core__$Callback_SimpleLink(link);
	return this1;
};
tink_core__$Callback_CallbackLink_$Impl_$.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core__$Callback_CallbackLink_$Impl_$.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core__$Callback_CallbackLink_$Impl_$.noop = function() {
};
tink_core__$Callback_CallbackLink_$Impl_$.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core__$Callback_CallbackLink_$Impl_$.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core__$Callback_CallbackLink_$Impl_$.toCallback = function(this1) {
	return function(_) {
		this1.cancel();
	};
};
tink_core__$Callback_CallbackLink_$Impl_$.fromFunction = function(f) {
	var this1 = new tink_core__$Callback_SimpleLink(f);
	return this1;
};
tink_core__$Callback_CallbackLink_$Impl_$.join = function(a,b) {
	return new tink_core__$Callback_LinkPair(a,b);
};
tink_core__$Callback_CallbackLink_$Impl_$.fromMany = function(callbacks) {
	var this1 = new tink_core__$Callback_SimpleLink(function() {
		var _g = 0;
		while(_g < callbacks.length) {
			var cb = callbacks[_g];
			++_g;
			if(cb != null) {
				cb.cancel();
			}
		}
	});
	return this1;
};
var tink_core__$Callback_SimpleLink = function(f) {
	this.f = f;
};
$hxClasses["tink.core._Callback.SimpleLink"] = tink_core__$Callback_SimpleLink;
tink_core__$Callback_SimpleLink.__name__ = ["tink","core","_Callback","SimpleLink"];
tink_core__$Callback_SimpleLink.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_SimpleLink.prototype = {
	cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core__$Callback_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
$hxClasses["tink.core._Callback.LinkPair"] = tink_core__$Callback_LinkPair;
tink_core__$Callback_LinkPair.__name__ = ["tink","core","_Callback","LinkPair"];
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this2 = this.b;
			if(this2 != null) {
				this2.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
$hxClasses["tink.core._Callback.ListCell"] = tink_core__$Callback_ListCell;
tink_core__$Callback_ListCell.__name__ = ["tink","core","_Callback","ListCell"];
tink_core__$Callback_ListCell.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	invoke: function(data) {
		if(this.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(this.cb,data);
		}
	}
	,clear: function() {
		this.list = null;
		this.cb = null;
	}
	,cancel: function() {
		var _g = this.list;
		if(_g != null) {
			var v = _g;
			this.clear();
			HxOverrides.remove(v,this);
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core__$Callback_CallbackList_$Impl_$ = {};
$hxClasses["tink.core._Callback.CallbackList_Impl_"] = tink_core__$Callback_CallbackList_$Impl_$;
tink_core__$Callback_CallbackList_$Impl_$.__name__ = ["tink","core","_Callback","CallbackList_Impl_"];
tink_core__$Callback_CallbackList_$Impl_$.__properties__ = {get_length:"get_length"};
tink_core__$Callback_CallbackList_$Impl_$._new = function() {
	var this1 = [];
	return this1;
};
tink_core__$Callback_CallbackList_$Impl_$.get_length = function(this1) {
	return this1.length;
};
tink_core__$Callback_CallbackList_$Impl_$.add = function(this1,cb) {
	var node = new tink_core__$Callback_ListCell(cb,this1);
	this1.push(node);
	return node;
};
tink_core__$Callback_CallbackList_$Impl_$.invoke = function(this1,data) {
	var _g = 0;
	var _g1 = this1.slice();
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
		}
	}
};
tink_core__$Callback_CallbackList_$Impl_$.clear = function(this1) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		cell.clear();
	}
};
tink_core__$Callback_CallbackList_$Impl_$.invokeAndClear = function(this1,data) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
		}
	}
};
var tink_core__$Error_Stack_$Impl_$ = {};
$hxClasses["tink.core._Error.Stack_Impl_"] = tink_core__$Error_Stack_$Impl_$;
tink_core__$Error_Stack_$Impl_$.__name__ = ["tink","core","_Error","Stack_Impl_"];
tink_core__$Error_Stack_$Impl_$.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Future_FutureObject = function() { };
$hxClasses["tink.core._Future.FutureObject"] = tink_core__$Future_FutureObject;
tink_core__$Future_FutureObject.__name__ = ["tink","core","_Future","FutureObject"];
tink_core__$Future_FutureObject.prototype = {
	__class__: tink_core__$Future_FutureObject
};
var tink_core__$Future_NeverFuture = function() {
};
$hxClasses["tink.core._Future.NeverFuture"] = tink_core__$Future_NeverFuture;
tink_core__$Future_NeverFuture.__name__ = ["tink","core","_Future","NeverFuture"];
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	map: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,flatMap: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,handle: function(callback) {
		return null;
	}
	,gather: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,eager: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core__$Lazy_LazyObject = function() { };
$hxClasses["tink.core._Lazy.LazyObject"] = tink_core__$Lazy_LazyObject;
tink_core__$Lazy_LazyObject.__name__ = ["tink","core","_Lazy","LazyObject"];
tink_core__$Lazy_LazyObject.prototype = {
	__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
$hxClasses["tink.core._Lazy.LazyConst"] = tink_core__$Lazy_LazyConst;
tink_core__$Lazy_LazyConst.__name__ = ["tink","core","_Lazy","LazyConst"];
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
$hxClasses["tink.core._Future.SyncFuture"] = tink_core__$Future_SyncFuture;
tink_core__$Future_SyncFuture.__name__ = ["tink","core","_Future","SyncFuture"];
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var l = this.value.map(f);
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return l.get().handle(cb);
		});
	}
	,handle: function(cb) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
var tink_core__$Future_Future_$Impl_$ = {};
$hxClasses["tink.core._Future.Future_Impl_"] = tink_core__$Future_Future_$Impl_$;
tink_core__$Future_Future_$Impl_$.__name__ = ["tink","core","_Future","Future_Impl_"];
tink_core__$Future_Future_$Impl_$._new = function(f) {
	var this1 = new tink_core__$Future_SimpleFuture(f);
	return this1;
};
tink_core__$Future_Future_$Impl_$.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this2 = l1;
		ret1.handle(function(_) {
			this2.cancel();
		});
	}
	if(l2 != null) {
		var this3 = l2;
		ret1.handle(function(_1) {
			this3.cancel();
		});
	}
	return ret1;
};
tink_core__$Future_Future_$Impl_$.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.map(f);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.flatMap = function(this1,next,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(next);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core__$Future_Future_$Impl_$.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(t) {
		var ret1 = other.map(function(a) {
			return merger(t,a);
		});
		return ret1;
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.flatten = function(f) {
	return new tink_core__$Future_NestedFuture(f);
};
tink_core__$Future_Future_$Impl_$.ofJsPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		})["catch"](function(e) {
			var tmp = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 78, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"}));
			cb(tmp);
		});
	});
};
tink_core__$Future_Future_$Impl_$.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core__$Future_Future_$Impl_$.asPromise = function(s) {
	return s;
};
tink_core__$Future_Future_$Impl_$.ofMany = function(futures,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
	var _g = 0;
	while(_g < futures.length) {
		var f = [futures[_g]];
		++_g;
		var ret1 = ret.flatMap((function(f1) {
			return function(results) {
				var ret2 = (function() {
					return function(result) {
						return results.concat([result]);
					};
				})();
				var ret3 = f1[0].map(ret2);
				return ret3;
			};
		})(f));
		ret = ret1;
	}
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.fromMany = function(futures) {
	return tink_core__$Future_Future_$Impl_$.ofMany(futures);
};
tink_core__$Future_Future_$Impl_$.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core__$Future_Future_$Impl_$.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core__$Future_Future_$Impl_$.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_LazyTrigger(f);
	} else {
		var op = new tink_core_FutureTrigger();
		var wrapped = f;
		tink_core__$Callback_Callback_$Impl_$.invoke(wrapped,$bind(op,op.trigger));
		return op;
	}
};
tink_core__$Future_Future_$Impl_$.or = function(a,b) {
	return tink_core__$Future_Future_$Impl_$.first(a,b);
};
tink_core__$Future_Future_$Impl_$.either = function(a,b) {
	var ret = a.map(haxe_ds_Either.Left);
	var ret1 = b.map(haxe_ds_Either.Right);
	return tink_core__$Future_Future_$Impl_$.first(ret,ret1);
};
tink_core__$Future_Future_$Impl_$.and = function(a,b) {
	return tink_core__$Future_Future_$Impl_$.merge(a,b,function(a1,b1) {
		var this1 = new tink_core_MPair(a1,b1);
		return this1;
	});
};
tink_core__$Future_Future_$Impl_$._tryFailingFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return map(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var ret1 = map(d).map(tink_core_Outcome.Success);
			return ret1.gather();
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryFailingMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError(map));
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._flatMap = function(f,map) {
	var ret = f.flatMap(map);
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._map = function(f,map) {
	var ret = f.map(map);
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$.trigger = function() {
	return new tink_core_FutureTrigger();
};
var tink_core__$Future_SimpleFuture = function(f) {
	this.f = f;
};
$hxClasses["tink.core._Future.SimpleFuture"] = tink_core__$Future_SimpleFuture;
tink_core__$Future_SimpleFuture.__name__ = ["tink","core","_Future","SimpleFuture"];
tink_core__$Future_SimpleFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SimpleFuture.prototype = {
	handle: function(callback) {
		return this.f(callback);
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		});
	}
	,flatMap: function(f) {
		var f1 = f;
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.flatten(new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f1(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		}));
	}
	,gather: function() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	,eager: function() {
		var ret = this.gathered != null ? this.gathered : this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
	,__class__: tink_core__$Future_SimpleFuture
};
var tink_core__$Future_NestedFuture = function(outer) {
	this.outer = outer;
};
$hxClasses["tink.core._Future.NestedFuture"] = tink_core__$Future_NestedFuture;
tink_core__$Future_NestedFuture.__name__ = ["tink","core","_Future","NestedFuture"];
tink_core__$Future_NestedFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NestedFuture.prototype = {
	map: function(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.map(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	,flatMap: function(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.flatMap(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	,gather: function() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	,eager: function() {
		var ret = this.gathered != null ? this.gathered : this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
	,handle: function(cb) {
		var ret = null;
		ret = this.outer.handle(function(inner) {
			ret = inner.handle(function(result) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
			});
		});
		return ret;
	}
	,__class__: tink_core__$Future_NestedFuture
};
var tink_core_FutureTrigger = function() {
	var this1 = [];
	this.list = this1;
};
$hxClasses["tink.core.FutureTrigger"] = tink_core_FutureTrigger;
tink_core_FutureTrigger.__name__ = ["tink","core","FutureTrigger"];
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	var op = null;
	var this1 = new tink_core__$Future_SimpleFuture(function(cb) {
		if(op == null) {
			op = new tink_core_FutureTrigger();
			f.handle($bind(op,op.trigger));
			f = null;
		}
		return op.handle(cb);
	});
	return this1;
};
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			return tink_core__$Callback_CallbackList_$Impl_$.add(v,callback);
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				var tmp = f(v1);
				ret.trigger(tmp);
			});
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				f(v1).handle($bind(ret,ret.trigger));
			});
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
			tink_core__$Callback_CallbackList_$Impl_$.clear(list);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core__$Future_LazyTrigger = function(op) {
	this.op = op;
	tink_core_FutureTrigger.call(this);
};
$hxClasses["tink.core._Future.LazyTrigger"] = tink_core__$Future_LazyTrigger;
tink_core__$Future_LazyTrigger.__name__ = ["tink","core","_Future","LazyTrigger"];
tink_core__$Future_LazyTrigger.__super__ = tink_core_FutureTrigger;
tink_core__$Future_LazyTrigger.prototype = $extend(tink_core_FutureTrigger.prototype,{
	eager: function() {
		if(this.op != null) {
			var op = this.op;
			this.op = null;
			tink_core__$Callback_Callback_$Impl_$.invoke(op,$bind(this,this.trigger));
		}
		return this;
	}
	,map: function(f) {
		var _gthis = this;
		if(this.op == null) {
			return tink_core_FutureTrigger.prototype.map.call(this,f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					var tmp = f(v);
					cb(tmp);
				});
			},true);
		}
	}
	,flatMap: function(f) {
		var _gthis = this;
		if(this.op == null) {
			return tink_core_FutureTrigger.prototype.flatMap.call(this,f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					f(v).handle(cb);
				});
			},true);
		}
	}
	,handle: function(cb) {
		this.eager();
		return tink_core_FutureTrigger.prototype.handle.call(this,cb);
	}
	,__class__: tink_core__$Future_LazyTrigger
});
var tink_core_JsPromiseTools = function() { };
$hxClasses["tink.core.JsPromiseTools"] = tink_core_JsPromiseTools;
tink_core_JsPromiseTools.__name__ = ["tink","core","JsPromiseTools"];
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
var tink_core__$Lazy_Lazy_$Impl_$ = {};
$hxClasses["tink.core._Lazy.Lazy_Impl_"] = tink_core__$Lazy_Lazy_$Impl_$;
tink_core__$Lazy_Lazy_$Impl_$.__name__ = ["tink","core","_Lazy","Lazy_Impl_"];
tink_core__$Lazy_Lazy_$Impl_$.get = function(this1) {
	return this1.get();
};
tink_core__$Lazy_Lazy_$Impl_$.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core__$Lazy_Lazy_$Impl_$.map = function(this1,f) {
	return this1.map(f);
};
tink_core__$Lazy_Lazy_$Impl_$.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core__$Lazy_Lazy_$Impl_$.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
$hxClasses["tink.core._Lazy.LazyFunc"] = tink_core__$Lazy_LazyFunc;
tink_core__$Lazy_LazyFunc.__name__ = ["tink","core","_Lazy","LazyFunc"];
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var this1 = _gthis.get();
			return f(this1).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
$hxClasses["tink.core.NamedWith"] = tink_core_NamedWith;
tink_core_NamedWith.__name__ = ["tink","core","NamedWith"];
tink_core_NamedWith.prototype = {
	__class__: tink_core_NamedWith
};
var tink_core_OptionTools = function() { };
$hxClasses["tink.core.OptionTools"] = tink_core_OptionTools;
tink_core_OptionTools.__name__ = ["tink","core","OptionTools"];
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw new js__$Boot_HaxeError(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return l.get();
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		var _hx_tmp = f(o.v);
		if(_hx_tmp == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		var v1 = o.v;
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		var v = o.v;
		this.value = v;
	} else {
		this.alive = false;
	}
};
$hxClasses["tink.core.OptionIter"] = tink_core_OptionIter;
tink_core_OptionIter.__name__ = ["tink","core","OptionIter"];
tink_core_OptionIter.prototype = {
	hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
var tink_core_OutcomeTools = function() { };
$hxClasses["tink.core.OutcomeTools"] = tink_core_OutcomeTools;
tink_core_OutcomeTools.__name__ = ["tink","core","OutcomeTools"];
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var failure = outcome.failure;
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw new js__$Boot_HaxeError(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return haxe_ds_Option.Some(data);
	case 1:
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option._hx_index) {
	case 0:
		var value = option.v;
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 47, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		return outcome;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data == to;
	case 1:
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		return tink_core_Outcome.Failure(report((e instanceof js__$Boot_HaxeError) ? e.val : e));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		switch(o.data._hx_index) {
		case 0:
			var d = o.data.data;
			return tink_core_Outcome.Success(d);
		case 1:
			var f = o.data.failure;
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f1 = o.failure;
		return tink_core_Outcome.Failure(f1);
	}
};
var tink_core__$Outcome_OutcomeMapper_$Impl_$ = {};
$hxClasses["tink.core._Outcome.OutcomeMapper_Impl_"] = tink_core__$Outcome_OutcomeMapper_$Impl_$;
tink_core__$Outcome_OutcomeMapper_$Impl_$.__name__ = ["tink","core","_Outcome","OutcomeMapper_Impl_"];
tink_core__$Outcome_OutcomeMapper_$Impl_$._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var _g = f(d);
			switch(_g._hx_index) {
			case 0:
				var d1 = _g.data;
				return tink_core_Outcome.Success(d1);
			case 1:
				var f1 = _g.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f2 = o.failure;
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f2));
		}
	});
};
var tink_core__$Pair_Pair_$Impl_$ = {};
$hxClasses["tink.core._Pair.Pair_Impl_"] = tink_core__$Pair_Pair_$Impl_$;
tink_core__$Pair_Pair_$Impl_$.__name__ = ["tink","core","_Pair","Pair_Impl_"];
tink_core__$Pair_Pair_$Impl_$.__properties__ = {get_b:"get_b",get_a:"get_a"};
tink_core__$Pair_Pair_$Impl_$._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core__$Pair_Pair_$Impl_$.get_a = function(this1) {
	return this1.a;
};
tink_core__$Pair_Pair_$Impl_$.get_b = function(this1) {
	return this1.b;
};
tink_core__$Pair_Pair_$Impl_$.toBool = function(this1) {
	return this1 != null;
};
tink_core__$Pair_Pair_$Impl_$.isNil = function(this1) {
	return this1 == null;
};
tink_core__$Pair_Pair_$Impl_$.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
$hxClasses["tink.core.MPair"] = tink_core_MPair;
tink_core_MPair.__name__ = ["tink","core","MPair"];
tink_core_MPair.prototype = {
	__class__: tink_core_MPair
};
var tink_core__$Promise_Promise_$Impl_$ = {};
$hxClasses["tink.core._Promise.Promise_Impl_"] = tink_core__$Promise_Promise_$Impl_$;
tink_core__$Promise_Promise_$Impl_$.__name__ = ["tink","core","_Promise","Promise_Impl_"];
tink_core__$Promise_Promise_$Impl_$.eager = function(this1) {
	return this1.eager();
};
tink_core__$Promise_Promise_$Impl_$.map = function(this1,f) {
	var ret = this1.map(f);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.flatMap = function(this1,f) {
	var ret = this1.flatMap(f);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.tryRecover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.recover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.mapError = function(this1,f) {
	var ret = this1.map(function(o) {
		switch(o._hx_index) {
		case 0:
			return o;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(f(e));
		}
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core__$Promise_Promise_$Impl_$.noise = function(this1) {
	return tink_core__$Promise_Promise_$Impl_$.next(this1,function(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
	});
};
tink_core__$Promise_Promise_$Impl_$.isSuccess = function(this1) {
	var ret = this1.map(function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Promise_Promise_$Impl_$.swap = function(this1,v) {
	return tink_core__$Future_Future_$Impl_$._tryMap(this1,function(_) {
		return v;
	});
};
tink_core__$Promise_Promise_$Impl_$.swapError = function(this1,e) {
	return tink_core__$Promise_Promise_$Impl_$.mapError(this1,function(_) {
		return e;
	});
};
tink_core__$Promise_Promise_$Impl_$.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	return tink_core__$Promise_Promise_$Impl_$.next(this1,function(t) {
		return tink_core__$Promise_Promise_$Impl_$.next(other,function(a) {
			return merger(t,a);
		},false);
	},gather);
};
tink_core__$Promise_Promise_$Impl_$.and = function(a,b) {
	return tink_core__$Promise_Promise_$Impl_$.merge(a,b,function(a1,b1) {
		var this1 = new tink_core_MPair(a1,b1);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
	});
};
tink_core__$Promise_Promise_$Impl_$.iterate = function(promises,$yield,$finally,lazy) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						$yield(v).handle(function(o1) {
							switch(o1._hx_index) {
							case 0:
								switch(o1.data._hx_index) {
								case 0:
									var ret = o1.data.v;
									cb(tink_core_Outcome.Success(ret));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								var e = o1.failure;
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						});
						break;
					case 1:
						var e1 = o.failure;
						cb(tink_core_Outcome.Failure(e1));
						break;
					}
				});
			} else {
				$finally.handle(cb);
			}
		};
		next();
	},lazy);
};
tink_core__$Promise_Promise_$Impl_$.ofJsPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
tink_core__$Promise_Promise_$Impl_$.ofSpecific = function(s) {
	return s;
};
tink_core__$Promise_Promise_$Impl_$.ofFuture = function(f) {
	var ret = f.map(tink_core_Outcome.Success);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core__$Promise_Promise_$Impl_$.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core__$Promise_Promise_$Impl_$.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core__$Promise_Promise_$Impl_$.lazy = function(p) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		p.get().handle(cb);
	},true);
};
tink_core__$Promise_Promise_$Impl_$.inParallel = function(a,concurrency,lazy) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
	} else {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var result = [];
			var pending = a.length;
			var links = null;
			var linkArray = [];
			var sync = false;
			var i = 0;
			var iter = HxOverrides.iter(a);
			var next = null;
			var done = function(o) {
				if(links == null) {
					sync = true;
				} else if(links != null) {
					links.cancel();
				}
				cb(o);
			};
			var fail = function(e) {
				pending = 0;
				done(tink_core_Outcome.Failure(e));
			};
			var set = function(index,value) {
				result[index] = value;
				if((pending -= 1) == 0) {
					done(tink_core_Outcome.Success(result));
				} else if(iter.hasNext() && pending > 0) {
					next();
				}
			};
			next = function() {
				i += 1;
				var index1 = i - 1;
				var next1 = iter.next().handle(function(o1) {
					switch(o1._hx_index) {
					case 0:
						var v = o1.data;
						set(index1,v);
						break;
					case 1:
						var e1 = o1.failure;
						fail(e1);
						break;
					}
				});
				linkArray.push(next1);
			};
			while(true) {
				var tmp;
				if(iter.hasNext() && pending > 0) {
					if(concurrency != null) {
						concurrency -= 1;
						tmp = concurrency + 1 > 0;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				next();
			}
			links = tink_core__$Callback_CallbackLink_$Impl_$.fromMany(linkArray);
			if(sync) {
				if(links != null) {
					links.cancel();
				}
			}
		},lazy);
	}
};
tink_core__$Promise_Promise_$Impl_$.inSequence = function(a) {
	var loop = null;
	loop = function(index) {
		if(index == a.length) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core__$Promise_Promise_$Impl_$.next(a[index],function(head) {
				return tink_core__$Promise_Promise_$Impl_$.next(loop(index + 1),function(tail) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
				});
			});
		}
	};
	return loop(0);
};
tink_core__$Promise_Promise_$Impl_$.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core__$Promise_Promise_$Impl_$.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		var ret1 = ret.map(function(o1) {
			if(!tink_core_OutcomeTools.isSuccess(o1)) {
				p = null;
			}
			return o1;
		});
		return ret1.gather();
	};
};
tink_core__$Promise_Promise_$Impl_$.lift = function(p) {
	return p;
};
var tink_core__$Promise_Next_$Impl_$ = {};
$hxClasses["tink.core._Promise.Next_Impl_"] = tink_core__$Promise_Next_$Impl_$;
tink_core__$Promise_Next_$Impl_$.__name__ = ["tink","core","_Promise","Next_Impl_"];
tink_core__$Promise_Next_$Impl_$.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core__$Promise_Next_$Impl_$.ofSync = function(f) {
	return function(x) {
		var ret = f(x).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core__$Promise_Next_$Impl_$.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core__$Promise_Next_$Impl_$._chain = function(a,b) {
	return function(v) {
		return tink_core__$Promise_Promise_$Impl_$.next(a(v),b);
	};
};
var tink_core__$Promise_Recover_$Impl_$ = {};
$hxClasses["tink.core._Promise.Recover_Impl_"] = tink_core__$Promise_Recover_$Impl_$;
tink_core__$Promise_Recover_$Impl_$.__name__ = ["tink","core","_Promise","Recover_Impl_"];
tink_core__$Promise_Recover_$Impl_$.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core__$Promise_Combiner_$Impl_$ = {};
$hxClasses["tink.core._Promise.Combiner_Impl_"] = tink_core__$Promise_Combiner_$Impl_$;
tink_core__$Promise_Combiner_$Impl_$.__name__ = ["tink","core","_Promise","Combiner_Impl_"];
tink_core__$Promise_Combiner_$Impl_$.ofSafe = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core__$Promise_Combiner_$Impl_$.ofSync = function(f) {
	return function(x1,x2) {
		var ret = f(x1,x2).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core__$Promise_Combiner_$Impl_$.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core__$Ref_Ref_$Impl_$ = {};
$hxClasses["tink.core._Ref.Ref_Impl_"] = tink_core__$Ref_Ref_$Impl_$;
tink_core__$Ref_Ref_$Impl_$.__name__ = ["tink","core","_Ref","Ref_Impl_"];
tink_core__$Ref_Ref_$Impl_$.__properties__ = {set_value:"set_value",get_value:"get_value"};
tink_core__$Ref_Ref_$Impl_$._new = function() {
	var this1 = new Array(1);
	var this2 = this1;
	return this2;
};
tink_core__$Ref_Ref_$Impl_$.get_value = function(this1) {
	return this1[0];
};
tink_core__$Ref_Ref_$Impl_$.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core__$Ref_Ref_$Impl_$.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core__$Ref_Ref_$Impl_$.to = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return ret;
};
var tink_core__$Signal_Signal_$Impl_$ = {};
$hxClasses["tink.core._Signal.Signal_Impl_"] = tink_core__$Signal_Signal_$Impl_$;
tink_core__$Signal_Signal_$Impl_$.__name__ = ["tink","core","_Signal","Signal_Impl_"];
tink_core__$Signal_Signal_$Impl_$._new = function(f) {
	var this1 = new tink_core__$Signal_SimpleSignal(f);
	return this1;
};
tink_core__$Signal_Signal_$Impl_$.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			var this3 = f(result);
			tink_core__$Callback_Callback_$Impl_$.invoke(cb,this3);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.flatMap = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			f(result).handle(cb);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			if(f(result)) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.select = function(this1,selector,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			var _g = selector(result);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,v);
				break;
			case 1:
				break;
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.join = function(this1,other,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return new tink_core__$Callback_LinkPair(this1.handle(cb),other.handle(cb));
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.nextTime = function(this1,condition) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.handle(function(v) {
		if(condition == null || condition(v)) {
			ret.trigger(v);
			if(link == null) {
				immediate = true;
			} else if(link != null) {
				link.cancel();
			}
		}
	});
	if(immediate) {
		if(link != null) {
			link.cancel();
		}
	}
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.until = function(this1,end) {
	var ret = new tink_core__$Signal_Suspendable(function($yield) {
		var this2 = this1.handle($yield);
		if(this2 == null) {
			return tink_core__$Callback_CallbackLink_$Impl_$.noop;
		} else {
			return ($_=this2,$bind($_,$_.cancel));
		}
	});
	end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic($bind(ret,ret.kill)));
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.next = function(this1,condition) {
	return tink_core__$Signal_Signal_$Impl_$.nextTime(this1,condition);
};
tink_core__$Signal_Signal_$Impl_$.noise = function(this1) {
	return tink_core__$Signal_Signal_$Impl_$.map(this1,function(_) {
		return tink_core_Noise.Noise;
	});
};
tink_core__$Signal_Signal_$Impl_$.gather = function(this1) {
	var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
	this1.handle(function(x) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(ret.handlers,x);
	});
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.generate = function(generator) {
	var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
	generator($bind(ret,ret.trigger));
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core__$Signal_Signal_$Impl_$.create = function(create) {
	return new tink_core__$Signal_Suspendable(create);
};
tink_core__$Signal_Signal_$Impl_$.ofClassical = function(add,remove,gather) {
	if(gather == null) {
		gather = true;
	}
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		var f = function(a) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cb,a);
		};
		add(f);
		var f1 = remove;
		var a1 = f;
		var this2 = new tink_core__$Callback_SimpleLink(function() {
			f1(a1);
		});
		return this2;
	});
	var ret = this1;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
var tink_core_SignalObject = function() { };
$hxClasses["tink.core.SignalObject"] = tink_core_SignalObject;
tink_core_SignalObject.__name__ = ["tink","core","SignalObject"];
tink_core_SignalObject.prototype = {
	__class__: tink_core_SignalObject
};
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
$hxClasses["tink.core._Signal.SimpleSignal"] = tink_core__$Signal_SimpleSignal;
tink_core__$Signal_SimpleSignal.__name__ = ["tink","core","_Signal","SimpleSignal"];
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_SimpleSignal.prototype = {
	handle: function(cb) {
		return this.f(cb);
	}
	,__class__: tink_core__$Signal_SimpleSignal
};
var tink_core__$Signal_Suspendable = function(activate) {
	this.killed = false;
	this.trigger = new tink_core_SignalTrigger();
	this.activate = activate;
};
$hxClasses["tink.core._Signal.Suspendable"] = tink_core__$Signal_Suspendable;
tink_core__$Signal_Suspendable.__name__ = ["tink","core","_Signal","Suspendable"];
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_Suspendable.prototype = {
	kill: function() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	,handle: function(cb) {
		var _gthis = this;
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.length == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var a = tink_core__$Callback_CallbackList_$Impl_$.add(this.trigger.handlers,cb);
		var this1 = new tink_core__$Callback_SimpleLink(function() {
			if(_gthis.trigger.handlers.length == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(a,this1);
	}
	,__class__: tink_core__$Signal_Suspendable
};
var tink_core_SignalTrigger = function() {
	this.handlers = [];
};
$hxClasses["tink.core.SignalTrigger"] = tink_core_SignalTrigger;
tink_core_SignalTrigger.__name__ = ["tink","core","SignalTrigger"];
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	trigger: function(event) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(this.handlers,event);
	}
	,getLength: function() {
		return this.handlers.length;
	}
	,handle: function(cb) {
		return tink_core__$Callback_CallbackList_$Impl_$.add(this.handlers,cb);
	}
	,clear: function() {
		tink_core__$Callback_CallbackList_$Impl_$.clear(this.handlers);
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
fixture_model_ComputedModel.__scout_ids = 0;
fixture_model_OptionalModel.__scout_ids = 0;
fixture_model_ReactiveModel.__scout_ids = 0;
fixture_model_SimpleModel.__scout_ids = 0;
fixture_model_TransitionableModel.__scout_ids = 0;
fixture_model_WithViewModel.__scout_ids = 0;
scout_View.__scout_ids = 0;
fixture_view_WithCollectionView.id = 10;
hex_core_HashCodeFactory._nKEY = 0;
hex_core_HashCodeFactory._M = new haxe_ds_ObjectMap();
hex_error_IllegalArgumentException.__meta__ = { obj : { IgnoreCover : null}};
hex_error_IllegalStateException.__meta__ = { obj : { IgnoreCover : null}};
hex_error_NoSuchElementException.__meta__ = { obj : { IgnoreCover : null}};
hex_error_NullPointerException.__meta__ = { obj : { IgnoreCover : null}};
hex_error_PrivateConstructorException.__meta__ = { obj : { IgnoreCover : null}};
hex_unittest_assertion_Assert._assertCount = 0;
hex_unittest_assertion_Assert._assertFailedCount = 0;
hex_unittest_assertion_Assert._lastAssertionLog = "";
hex_unittest_assertion_Assert._assertionLogs = [];
hex_unittest_metadata_MetadataList.BEFORE_CLASS = "BeforeClass";
hex_unittest_metadata_MetadataList.AFTER_CLASS = "AfterClass";
hex_unittest_metadata_MetadataList.BEFORE = "Before";
hex_unittest_metadata_MetadataList.AFTER = "After";
hex_unittest_metadata_MetadataList.TEST = "Test";
hex_unittest_metadata_MetadataList.ASYNC = "Async";
hex_unittest_metadata_MetadataList.TIMEOUT = "Timeout";
hex_unittest_metadata_MetadataList.IGNORE = "Ignore";
hex_unittest_metadata_MetadataList.SUITE = "Suite";
hex_unittest_metadata_MetadataList.DATA_PROVIDER = "DataProvider";
hex_unittest_metadata_MetadataList.INSTANCE_METADATA = ["Before","After","Test","Async","Timeout"];
hex_unittest_metadata_MetadataList.STATIC_METADATA = ["BeforeClass","AfterClass"];
js_Boot.__toStr = ({ }).toString;
hex_unittest_notifier_BrowserUnitTestNotifier._TRACE = haxe_Log.trace;
hex_unittest_runner_TestRunner.RENDER_DELAY = 0;
scout_CollectionTest.__meta__ = { fields : { testBasics : { Test : null}, testDoesNotAddDups : { Test : null}, testAddRemoveLifecycle : { Test : null}, testModelChanges : { Test : null}}};
scout_Dom.docNodeType = 9;
scout_ModelTest.__meta__ = { fields : { testConstructor : { Test : null}, testSignalsWithObserve : { Test : null}, signalDoesNotFireIfNoChange : { Test : null}, testSpecificSignals : { Test : null}, testComputed : { Test : null}, testAutoIncrement : { Test : null}, testReactiveModel : { Test : null}, testTransitionableModel : { Test : null}, testOptionalModel : { Test : null}, testModelsUseTheCorrectPropertyWithViews : { Test : null}}};
scout_TemplateTest.__meta__ = { fields : { testEscape : { Test : null}, testDoesNotEscapeNestedTemplates : { Test : null}, testArrays : { Test : null}, testArraysFromVarOfStringArray : { Test : null}, testArraysFromVarOfRenderResult : { Test : null}}};
scout_ViewTest.__meta__ = { fields : { testSimpleView : { Test : null}, testCustomElement : { Test : null}, testChild : { Test : null}, testChildren : { Test : null}, testStatefulView : { Test : null}, testStateChild : { Test : null}, testModelView : { Test : null}, testModelStateView : { Test : null}, testCollectionView : { Test : null}}};
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tink_core__$Callback_Callback_$Impl_$.MAX_DEPTH = 1000;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core__$Future_Future_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core__$Future_Future_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core__$Future_Future_$Impl_$.NEVER = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core__$Future_NeverFuture.inst));
tink_core__$Promise_Promise_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core__$Promise_Promise_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core__$Promise_Promise_$Impl_$.NEVER = (function($this) {
	var $r;
	var ret = tink_core__$Future_Future_$Impl_$.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
Run.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
